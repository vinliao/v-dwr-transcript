within crypto and kind of said, well, what can we do to improve the kind of like mobile experience for a permissionless protocol like RSS? And so that kind of made us do two things. So the first is we actually built the initial client for Forecaster because our point of view is we could come up with like the most brilliant technical spec in the world, but if you didn't have someone actually building it like an actual app with users on top of it, it's kind of like a science experiment. It's like, who cares? And so we actually started by wanting to build like, okay, how can we actually build like a consumer app that is as easy to use as Twitter? And so Warpcast is now what we call that. It's pretty close. I don't say it's 100% as good as Twitter, but we've made a lot of progress over the last couple of years. And then the second thing is, how can you build a kind of protocol that has the best features of RSS, right? The simplicity, the permissionlessness with the best kind of UX and features of Twitter, which is the kind of like instant real-time feedback, right? So really basic example. If I use RSS today and someone reads my blog post, there basically is no indication that you read that post, right? Like someone would have to send me an email and say, I really liked your blog post. Whereas if I post something on Twitter, put view counts to the side for a second. Just the fact that people can instantly reply while they're reading what is being said in addition to the ability to like or retweet, that's pretty powerful. And so bringing those kind of like standard interactions from kind of like someone consuming content and kind of coupling that together, I think is really important, but doing so in a decentralized way that allows you to kind of accomplish the permissionlessness of RSS. And so it's like, take the interactivity and speed of Twitter mixed with the kind of like simplicity and permissionlessness of RSS. And that's basically Farcaster. Gotcha. You just reminded me of an article talking about your co-founder Varun that he wrote about sufficient decentralization as applied to social networks. And it's this idea that, you know, maybe what we're going after isn't full decentralization. Maybe that isn't the answer to all of our problems, but what we should be focused on instead is sufficient decentralization. In your mind, like what is the difference between the two as applied to this decentralized social context? I just love to hear your thoughts on that. Yeah. So one way to think about it is you have centralized social networks, what we kind of have today, Instagram, Facebook, YouTube, Twitter, and then you have kind of like maximally decentralized social networks where it's like everyone's running their own server and you are kind of king of your own castle with that. And you can kind of like iterate with everything else. And then between those two points of the spectrum, you reach some level of more centralized or more decentralized. And so our point of view is if you actually start with centralized, because that's the thing that's won from a total number of people using it and user experience standpoint, and work your way towards decentralization, at some point you reach what we would say it's more art than science, but it's kind of a sufficient decentralization for the design of your social network where you can optimize for certain things being decentralized and other ones you don't necessarily care as the average user, or even as a developer or kind of like a big creator with a large audience. And so I think it's always useful to use analogies from other protocols. Email is a great example of this. The average person uses email in an extremely centralized way. They use a Gmail account. They don't even own their own name, right? Like if you have whatever email at Gmail, Google can take that away at any point. It's actually kind of scary to think about like if your entire life is around a Gmail account and you got shut off from Google for whatever reason, there is no recourse again for you to be able to go to court and say, hey, I need access to that email. Like my financial accounts and everything are tied there. Whereas if you had your own domain and you're using G Suite and Google decided to kick you off, you could actually just then change your DNS records and switch over to FastMail or Microsoft Outlook or whatever other provider in the email world. And in the same example, by the way, a sub-stack MailChimp, right? Like if I have an email newsletter, I can easily change different providers. And so I think what we wanted to kind of make a bet on is the average user is going to use a massively large central at scale, simple, easy to use service that plugs into a wider ecosystem of a bunch of different other providers and varying degrees of do-it-yourself or kind of other competing centralized providers. And the thing that we wanted to make sure that was decentralized is the actual identifier, right? The way to find you on the network, in this case, the username, is the thing that you actually want to be able to have be completely portable, right? And if that is tied to where you sign up, it actually, I think, gets really tricky because if I use a domain name based system and someone else owns the domain name, like the Gmail example, yeah, it's a decentralized or kind of like network that you can use different providers. But if your identity is actually tied up with that provider, the likelihood of you being able to move to a different service is pretty low. And so they actually have a lot more power over you. And I think that that is something that I learned at Coinbase where one thing that's really powerful, Coinbase lives in an environment where at any point, a customer of Coinbase can take their Bitcoin or Ethereum and move it either to their own wallet or to a competitor within a few clicks. And there is no, oh, well, this is special Coinbase Bitcoin or special Coinbase Ethereum. Like, no, it's completely fungible and you can move it to a different provider. And so by virtue of having to live on a network where there is actually full interoperability between other alternatives, Coinbase is forced to earn their customers trust on an ongoing basis, not because they have some like monopoly in terms of like a network effect or thing like that. Whereas if I don't like what Instagram is doing with their client, right? So there was a big kind of recent blow up where Instagram is moving away from photos in the feed to doing more video. Tough, like Instagram's like you want access to the Instagram graph and app, we get to decide. And there is no other option. I think there was even an app that launched, it's like Instagram OG or something where you could just get photos and it got shut down. And so I think where we're hoping to get to is by making the identity something that you can actually move around the ecosystem pretty easy, you've kind of reached the sufficient decentralization where you could still be using any of these large centralized providers, but your ability to kind of like switch to a different provider and seamlessly continue to communicate with your audience. That's for us, the thing that you actually really need to nail from a decentralization standpoint. And then arguably, for the average person, the rest of it, you want to centralize as possible because usually the centralization means you get better UX, right? But actually still having the ability, the credible ability to exit and then still interoperate with the rest of the ecosystem is the kind of thing that makes the protocol valuable. So basically, you want to have, for instance, like whatever my handle is on Twitter, DDW Chen, I want to be able to carry that handle and all of the followers I have on Twitter across all different social platforms. So it would be nice if I just started a YouTube channel for the first time, if I could expose all of my Twitter followers that I had spent the last decade building up to my new YouTube channel or to my new sub stack or to my new Instagram or TikTok or whatever other social. Totally. And you can kind of do this today in the sense that if you have a big audience on Twitter and you start a new YouTube, you just post a link to your YouTube and you slowly recreate. Now, in a world where the kind of like underlying social layer is a protocol, whether it's Forecaster or something different, then the idea would be you try a new app or service, and the developer there actually can just kind of permissionlessly pull in all of your other activity and offer you a better first run experience. So I would imagine that that probably increases the likelihood that people stick around in a new app. So it actually benefits the creation of new apps because that kind of like cold start bootstrapping problem is a little bit easier. It's still not quite solved, right? Like just because you can like interoperate with a bunch of data doesn't mean that you're going to stick around with a new app. But every bit of friction you can remove for someone to attempt a new type of app that has a social component to it, I think is an improvement. And in the aggregate, you end up having that much more innovation and attempts at new apps and services. So, for instance, my handle on Warpcast right now, which I believe is Tree Girl, I actually had to change it because I lost my keys to the first one, is going to be the same one when somebody else comes on a Forecaster and builds a new app, maybe like a photo sharing app, or maybe a video app or whatever, and I sign up for that app, then the people who are following me on Warpcast right now will automatically be following me on those new apps as well. Yeah, if the developer chooses that as the experience, right? They might just say, hey, like we have an algorithmic feed, and we're going to use all of your previous casts and likes into our algo to figure out like who you might be interested in. So, I think each developer is going to be able to have the freedom to choose what signals they want to use. But I think from a kind of like simplicity for the user, once I have a Forecaster account, right, like if you think about it, it's decentralized, I can just now use that as the kind of like way I sign up or sign into any of these other apps. But the important thing is, it's not like it's a single company that's administering the, you know, sign in with Facebook or Twitter is a centralized thing, right? So, if you lose access to your Twitter account, then you can't use that anywhere else. Whereas sign in with Forecaster, because it's the identity component is rooted in Ethereum address, means that when I sign up for that new video app, whatever it is, the relationship is between myself and that app, not Warpcast or any of the other apps that I might have started with. And so, that sovereign relationship between the developer and the user is actually pretty important, because that encourages developers to take the additional amount of effort, right? Like building anything is really hard. But building something and then thinking that you could have the terms of service or the rug pulled out from underneath you, because you know, you're growing really fast and like, they ultimately have the keys to the identity that just like it may have worked 15 years ago when we were first starting out a web too, but I think developers are pretty sophisticated today. And they don't want to be dependent on some third party platform that can change the rules on them really fast. Yeah, for sure. One common question I hear a lot from people is, what is the definition difference between Farcaster and Lens or other similar ones, Mastodon, Blue Sky, similarly trying to build these decentralized social protocols? Can you explain from your point of view, like what the major differences are? And maybe they are as similar as people think. But if there are any important differences, could you just clarify that for listeners? Yeah, look, there are a bunch of different people building different implementations of decentralized social protocols. I'm generally of the mind that there's not going to kind of just be one in the same way that you just don't have one blockchain, right? Like you've Bitcoin, you have Ethereum, you have a bunch of other ones. You know, there isn't one browser. There's like, you know, well, browser is actually an interesting example, because the web, HTTP did consolidate around kind of like one single protocol, and email being another. But I think the kind of like contrast, though, is in web two, right, the social networks, we don't have just one social network. It's not like everyone just uses Facebook. And if Facebook hadn't acquired Instagram, arguably, like it would even be less relevant today. And so the social network market, despite having a couple of really, really large ones, is relatively dynamic, right? Like TikTok didn't exist a few years ago. Twitter, Pinterest, like there's actually a lot of pretty at scale social networks relative to those kind of like web one protocols. And so hard to know, like how things play out in the sense that does it look more like web two, or you have multiple? Or does it look more like web one, where you only have, you know, kind of like one or two standard? I'll leave that to an armchair pundit to try to figure out. But in terms of like, how is Farcaster different? I'd say that there's like two primary buckets that differentiates how Farcaster is approaching building its protocol relative to maybe some others. So the first is, this is more for the kind of crypto decentralized social protocols. We have a minimal on chain footprint. So our point of view is blockchains are great. They are expensive, slow computers that are really good at preventing double spends. Now, are they going to get faster and cheaper over time? Yeah, that's fine. But I think as it relates to building something today, our point of view was, if we're going to use a blockchain, like, let's actually minimize how much we're using, because the goal here is actually to build a social network that people, the average everyday people can use over the next few years. And so our point of view is the thing that the blockchain solves for Farcaster, and the reason to actually deal with the cost and the complexity of doing that, is that sufficient decentralization of the identity. And our point of view is the moment you start relying on some type of corporation to manage the identity system, consortium to manage it, make the assumption that users are going to sign up and get a domain on their own. I don't believe that. Like, 30 years of history, people don't buy their own domain names. It's a very, very power user thing. And so from our standpoint, what we wanted to do is make it so that when you sign up on Farcaster, we abstract away the complexity enough that you're going to get a username that feels more like a Web2 username, right? Just like when you sign up for Twitter or Instagram, you get that username. And the complexity of managing that is just is just managed away. And in doing so, I think that that improves the usability, right? Like, we're not using the chain for all these posts, right? Compared to maybe some others that put everything on chain. And then the identity system relative to, and this is the second camp, the federated model, which says, I have a server, I'm associating my identity with this server and or this domain. I think that's just, from our standpoint, it's too power user, right? Like, users don't want to think about servers. They don't want to think about, like, which handle and the domain that's associated with. It's actually kind of confusing because now you have, like, email is a good example. This email today would just never exist. It would be an app username system because, like, that's the simpler version. Email was kind of like a power user, early, like, 80s internet version of an identity system that is kind of just stuck around. But if you look at how most mobile apps authenticate, they use a phone number, right? Because it's a simpler experience for users. And none of the kind of, like, Web 2 social networks adopted this kind of, like, multi-name system. It's just, like, a single username. And so you kind of solve for two things is you don't have the complexity of having to do everything on chain. And then as it relates to the kind of federated model, you don't have this identity that is kind of tied to a server. And I know there are some attempts at potentially trying to make the identity not associated with a single server in kind of the federated model of things. But that's still TBD. And the more I hear about that, the more I'm saying, hmm, it sounds like you're more and more wanting this neutral place to store the username data that can't be mucked with by any individual company or country. Sounds like a good use for a blockchain. I think where we're going to get to is that's either going to work or it's not. And we'll find out from the market standpoint. I think that the third thing that relates to especially the federated systems is the developer experience for building a new app is actually much harder in a federated system. Because if you think about it, something like Mastodon, how many Mastodon servers are there in the world? A thousand? Okay, scale it up. Ten thousand, a hundred thousand. If you want to go build a new Mastodon client, in order to actually provide a good user experience that's on par with Web2, you now have to interface and index data from all of those different servers. There's going to be weird quirks. The idea of getting to global state for the network to answer the question of what's happening, right? That's the kind of like primary thing that Twitter does really well, is a lot of work for a developer. Whereas, contrast that with a blockchain, yes, you have to put a bunch of stuff on chain and pay, which that has its own set of challenges. The beauty of a blockchain is you do get to global state every time that there's a block confirmation, right? So it's actually a decent developer experience. And so what we've done with Farcaster, we've tried to say, well, if we can avoid the cost of doing stuff on chain, but also have a single kind of global state that like gets to consensus really fast, that's actually going to be a great developer experience. And so we've actually done that with hubs, which are kind of just rolling out now. So it took us a couple of years to figure this out, where a hub is kind of like an Ethereum node, but for the Farcaster network, all of the data is stored off chain, right? So there's no cost from a kind of like per transaction. The identity is pulled from the Ethereum blockchain, and all of these hubs are able to sync the entire global state of the network in a pretty short period of time. So as a developer, all I have to do is spin up a new hub in the same way that if I want to build on Ethereum, I just spin up an Ethereum node or use Alchemy or something like that. And then I'm off to the races. Like I can be like, okay, do I want to see Tree Girls, CAS, boom. Like that's one API request. Like there is no, oh, what server is she on? Or like, how do I know where are the likes going to each one of her posts? Like where did they come from? Did I actually get to that kind of global state? This just exists in a single server, and that's going to be open source. And so we've spent a lot of time working on that. And our point of view is the identity system that is sufficiently decentralized mixed with this kind of like great developer experience that powers the underlying network is the optimal model to do. And we'll see. I mean, it's going to take us probably a few months or years to figure out which of any of these decentralized social networks will work. And then maybe the reveal preference three years from now is that people don't actually care, and they just care about their audience size on Twitter. And that's fine. I still think it's worth doing. And I'm optimistic, but I'm also realistic in the sense that it's like, we're only going to find out by trying. Yeah, I mean, I certainly hope that isn't the future we're looking at is where people still commit to Twitter above all else and don't see the benefit of these decentralized social protocols. But I think even as it stands today, I mean, I personally haven't really used Mastodon or BlueSky much, but having used Farcaster and Lens quite a bit, I think it seems to me like the audience segments on both platforms are already a little bit different, where it seems to me like Lens has really optimized for growth and kind of just trying to like onboard as many people as possible. And contrasting that to Farcaster, where the barrier to entry into Farcaster has been a bit higher. And maybe that is intentional on your part in curating a higher quality group of people. And that's, you know, I think when people think about growth strategies, I think those are kind of like the two competing strategies and Rehash, we've really gone with the quality over quantity, like slow growth strategy as well, where we really wanted to build a community slowly and start small with a group of people who really understood what we were doing, what we were all about and aligned with our values before we expand it out to the public. Because especially in a space like crypto, like Web3, you get a lot of people who are just in it for the quick flip one token, a lot of spammers, and that was something that we tried to avoid. And it kind of seems to me, you know, and tell me if I'm on point with this at all, or if I'm totally off, but it seems to me like Farcaster kind of had that similar strategy of trying to grow slowly and intentionally to build a solid user base before expanding out to more of the mainstream.