why sufficiently decentralized instead of completely centralized or completely decentralized? Yeah, so maybe just start with the issues of a centralized network or a completely decentralized network. So if we start with the centralized network problems, I mean, I'm sure your audience will know that there have been a bunch of problems with centralized social media companies over the last few years. You may have varying opinions on them. There's a lot of political spin on either side of that. But I think you could get a universal consensus that they're not perfect. And so there's room for improvement. And I think the challenge with centralized social networks is... Hello, everyone. Today, I'm here with Dan Romero. He's really into crypto. He was the VP of product at Coinbase and now he's the co-founder of ParkCaster, a sufficiently decentralized social network. I want to start a little bit with an overview of what's ParkCaster and what it means to be a sufficiently decentralized social network. So first of all, thanks for having me. The way I describe ParkCaster is it's a new type of social network and it's a social network where you as a user control your identity and can bring that identity between any application that you want to use. And that actually helps define the social network. It helps define the term that we use, sufficient decentralization, where I think a lot of people, when they think about centralization versus decentralization, you kind of have your classic Web2 companies, Facebook, Twitter on the Web2 side as the centralized options. And then you have the kind of extreme decentralized options, something like secure scuttlebutt, Mastodon being actually something that's probably in between and so may actually meet some threshold of sufficiently decentralized. But our point of view is actually when you want to build something that is more decentralized, not to start with the most extreme decentralized architecture, it's actually start with the centralized architecture because the revealed preference of consumers is they like using those apps. They have hundreds of millions, if not billions of users. And so you want to start with the user experience of a centralized application and then work to remove parts of the app that are centralized and kind of prevent, you know, the ability to exit the app with interoperability or the ability to switch to whatever client that you want and change the parts of the underlying architecture to be more decentralized on those parts. And so in the case of Forecaster, the app that you may use today looks a lot like Twitter. And in a lot of ways, a lot of the same infrastructure where we're running a lot of the like kind of feed generation infrastructure, the notification infrastructure on centralized servers, just like Twitter would be. But the core identity primitive is something that lives on the Ethereum blockchain and lives outside of the infrastructure that our company has. So that means if for whatever reason you didn't want to use our app anymore, you would be able to go use an app from another developer and everything would work completely as normal. Contrast that to something like Twitter or YouTube today. So you're on Twitter, you have a million followers, Twitter decides to remove your account, you don't get a chance to export your followers. There is no recourse. You can't go to court to say, I need to be reinstated Twitter. Twitter is a private company. They can do whatever they want. Same thing with YouTube. And contrast that in Web2 also to something like Substack, where I can build an audience with Substack. I, as the kind of creator or the publisher, own my email list. And so in the case that Substack for whatever reason didn't want to work with me, and they're generally actually pretty permissive of a wide variety of viewpoints, so I'm not picking on Substack, but I'm pointing out that whether it's Substack or myself as the publisher want to move, I can move to a different email newsletter provider, whether that's the centralized one, or I can run my own server. And the important thing is my audience doesn't know any different, right? Like they can still receive an email the next week, and it all works because email is built on top of decentralized protocols like DNS and email. And so to bring it all back to the beginning, what we're trying to do with Farcaster is we're trying to build something that's similar to email or DNS, but specifically for social, in that it's a low-level primitive that any developer can actually go build on top of, and then you as the user have the freedom to move between any application that you see fit. Awesome. So let's go into a little bit more detail what it means to be decentralized. So you mentioned that the identity is decentralized. What does it mean for identity to be decentralized? Is the social graph as well sitting on the Ethereum blockchain, or what is sitting on the blockchain? Is it the FID, or can you go into a little bit more detail? Yeah. So the core thing that with a network like Twitter, so kind of a public broadcast network where the ability to follow another user or subscribe to another user on the network is not permissioned. So on a network like Facebook or LinkedIn, if I want to connect with you, that's a bidirectional relationship. I'm making a friend request or a LinkedIn request, and then the other party needs to accept that. Twitter, for all intents and purposes, the default type of Twitter account is public. Everything is public about it. So all of the posts are public, all of the likes are public, who follows whom is public. I can follow you. You don't have to follow me back. And that's just how the network works, right? So in that case, the thing that is actually most critical to decentralization, so the easiest way to actually think about this is from a first principle standpoint is just think about what happens if you have that million followers on Twitter and you get kicked off of Twitter. What is, if you were to force rank all the things that you care about, your old tweets, your direct messages, your likes, none of those things actually matter relative to the fact that what you had achieved prior to being kicked off something like Twitter was you had a million people, all distributed around, who had indicated in a piece of software that any time I post to this network, please show me that content, right? So if you think about that, that can be boiled down to as a simple, there is a pointer somewhere that says content from X person lives here. And then whatever software they're using can actually go and try to retrieve that. And so if you're a little bit older school on the side of things like RSS is basically that, right? So I have a blog, I can have an RSS feed, I let someone subscribe to that. And then when they open up their RSS reader, the way that that architecture works is the RSS reader would go, okay, danromero.org slash RSS, I'm going to go check to see if there are any new posts. And in doing so, what you've effectively said is the critical thing is to have an ever present pointer for me as a publisher that I can have that people know what I'm doing and know where to find. So there's some version of an identity, and then it kind of points to where the content exists. And so that's essentially what we focused on for decentralization with Farcaster because that means no matter what application you're using, as long as it's properly authenticated, as you can prove that it is actually coming from me or from you, then the content can actually go out to the Farcaster protocol and then any application can pull it in and then verify that it actually did indeed come from the person that says, you know, who they said that we're coming from. So I think the way I think about that is if you just focus on the thing that needs the most effort on decentralization, then the rest of the experiences can actually be more centralized if that's actually what's going to offer users a better user experience. And so as a result of that, where we've put the most effort is this identity primitive, there's a middle layer where the content actually lives. And that's something we call Farcaster hubs, which we're actually still kind of in the process of building out, where you can kind of think of it as a blockchain without cryptocurrency. And in some ways, you don't need the kind of security guarantees of it because what you've actually done is you've put the canonical identity for this network on chain, right? Dan is this Ethereum address. And as a result of that Ethereum address being a public key, any piece of content that ends up on the kind of like Farcaster content network, the hubs, can be signed with the private key that maps to the public key that's on chain. And then any user has a very easy chain of trust of, okay, this is claiming to be from Dan. I'm going to check the signature. Does the signature match the pub key that is on the Ethereum blockchain? Yes. Okay, great. Then the content works. Obviously, no one is individually doing that. But the system is architected in a way that this can all automatically happen behind the scenes. And for the end user, all they see is they have high trust that the content that they see in their app is coming from the person that it claims to be. There is a single universal name, right? So there are, compared to something that's like more federated where it's actually based on domains, and Dan on, you know, Farcaster.social versus Dan on Farcaster.me, like that's actually two different people. In the Farcaster system, it's similar to Twitter or Instagram, is there's a universal namespace. So, you know, Dan, I'm actually DWR. DWR on Farcaster, there can only be one. And like you have a reasonable guarantee that if the app that you're using is following the Farcaster protocol, you don't have to be confused. And so any app that you switch to, assuming it's not malicious, it becomes very easy to identify that the same person is who they said they are. And so that's the kind of like melding of like we're trying to kind of create this decentralized identity space, which still needs to kind of be sorted out, and we'll see if it ends up working at scale with the user experience of Web2, which we know works at scale and that users like. And so that's about what Farcaster is like. Can you blend the best of both worlds? That's awesome. That's really cool. One question that I have is related to the social graph, right? Like the social graph, there is still a social graph that's built on top of the client. Is that still sitting on the blockchain or is that separate? Each application will have a social graph, and we can go later on into AMPs, which I think are a little bit separate from the social graph, but will be used in applications on top. Yeah, so our original hope was to put the traditional follow graph, who I follow you, you follow me, that those are all just kind of pieces of data that you could then construct in a decentralized way. Put that on the Farcaster hubs, right? So it's kind of like this permissionless data set. Any developer can spin up a hub and then have access to the global state of the network. I think where it gets a little challenging is, so if you actually think of what a Twitter follow is, it actually means two different things. So the first thing, which is actually what most people initially think is, I want to follow this content. I like show me more of this content or show me every time that this user posts. But in a network where it's actually public, like Twitter, and people can actually go through and see who you're following. And if you're not following that many people, there's actually this secondary thing that's implicit endorsement, right? So if I follow X person, and I'm only following 200 people, clearly that person is at a minimum interesting. And beyond that, it's like something that I endorse what they're saying. And obviously, that's not the actual case. You could follow plenty of people you disagree with, and in some ways that should be encouraged. But I think that the reveal preference is that people, I don't know, they have mixed feelings on who they follow. And or it actually probably, there's a number of follows that would happen on people's main account if they could make those private, right? And so what do you get? You get all these people use lists, which are private. People have alt Twitter accounts where they follow people. And so our view is, A, that action is a bundled action that could you actually separate what the, I want to see more information from this person. I want to endorse this person. And then the second thing is in a decentralized network, you have no guarantee that different applications are going to respect the decentralized follow, right? Because if there's user demand for private follows, you're going to have some applications that just do private follows. And then so at best, you're getting an altruistic social graph versus, I think one thing that we strongly believe as we're building these systems out is incentives rule everything. And so what you want to do is actually design things that end up at the protocol that have an incentive to actually naturally be decentralized. And so a cast, like a public post, has a natural incentive to be decentralized because most people who are casting, they're optimizing for distribution, right? They want as many people to see the post as possible or the people that they want to see to see it. So as a result, you using an application that does not actually publish a cast to the protocol means if your other followers are not using the same client as you, you're not going to see that. So there's a game theory in that you're only going to get users to use your client unless you're actually using the protocol. So cast is a natural area or a natural content type that will be decentralized just by virtue of the incentives. Like's the same thing, right? A private like, that's a bookmark. But I think a public like is actually meant to give some amount of interaction with the person who posted a post. So most apps are probably going to follow the public like. And then to the degree that you want to do a private like, just call it a bookmark. The last thing though, if you think about followers is then if you want to split what follow the content and endorse, we came up with this concept called amps, which you can think of an amp as a kind of recast. And for those who aren't a forecaster, recast is the equivalent of a retweet. And if you think about today on something like Twitter, you only can retweet a tweet. You cannot retweet an account. And so for us, amps are this concept of it's something you have a limited quantity of. So there's some scarcity to it. They automatically expire, which actually creates a level of freshness for them. And as a result of the mechanic, you're not actually taking a piece of content that you're amp. Amp stands for amplify. You are amplifying the account. And so what we're hoping is you actually start to get a dynamic leaderboard for the network of interest in this, right? Like an amp can mean anything, but for the most part, like when you recast something or you retweet something, you're basically saying kind of like, I want to boost this. So again, some amount of implicit endorsement. And so I think amps will be that for accounts. And then the nice thing is because they automatically expire, it's not a cumulative metric, right? It's actually something that you have to have some skin in the game proof of work where people are constantly wanting to boost your account because you're contributing interesting takes or liquidity to the social network. And so the long answer to all this is the superior version in a decentralized system of a social graph where you can't guarantee every client's going to follow it is use the primitives that you know have an incentive to be decentralized and effectively create an implicit social graph where you actually look at who you are replying to, who you are liking, and who you are amping. And so by actually taking that, you in some ways actually get something closer to maybe the original page rank model for Google, which if you think about how pages were ranked, it was, okay, some amount of semantic analysis of what's on the page, but then who was linking to you and then the recursive algorithm that was linking to those websites and giving everyone a score. And then as a result of the score, you score the actual content based on the interestingness based on how interesting the people linking to you are. And I think that that's probably the world that we're headed into with decentralized social. I could be wrong, but I think if you strongly believe incentives are the only way to guarantee that people will kind of follow through on things, then I think an implicit social graph is probably more likely and in some ways actually more effective, right? Because if I follow you and I never interact with your content versus I follow you and I reply to every one of your casts and I like every one of your tweets, that's technically each being followed once, but there's way more engagement on one than the other. Very cool. So let me play the devil's advocate, right? Why make it a sufficiently decentralized social network? Decentralized ones work great. Twitter is perfect. It has no problems whatsoever, right? These social networks have no problems whatsoever. Why make it sufficiently decentralized? And another question related to that, why not make completely decentralized, right? So why sufficiently decentralized instead of completely centralized or completely decentralized? Yeah. So maybe just start with the issues of a centralized network or a completely decentralized network. So if we start with the centralized network problems, I mean, I'm sure your audience will know that there've been a bunch of problems with centralized social media companies over the last few years. You may have varying opinions on them. There's a lot of political spin on either side of that, but I think you could get a universal consensus that they're not perfect. And so there's room for improvement. And I think the challenge with centralized social networks is they don't allow client choice because of the way that their business models are. And you could actually build a centralized social network potentially with a different business model that may have this to work, but we can put that to the side. So yeah, maybe you could go try to build a competitor to Twitter that's completely centralized. But I think that the challenge is if you don't have client choice, then inevitably you're bundling a whole bunch of things together. So you're bundling content hosting, which there's liability with content hosting, which then means content moderation gets bundled in. And it's not like they offer you different versions of content moderation. There's kind of like a single content moderation on the bus policy per social network. And then you actually don't own your distribution, right? And so if you view these, especially public broadcast networks, as this kind of tool to reach an audience, and if your business is being in the business of producing content, not having control of your audience seems kind of crazy. And especially because we have contrasting examples of both the web and email. And so it's just the fact that these kind of networks have so much attention share forces all of these people to have to use them, but they're still at the whim of these networks. And so you can be yanked from the network at any point for whatever reason. And it used to be, oh, the only people were getting banned from networks were right-wing people. But I think we've just gone through a period recently with Twitter where a bunch of left-leaning people were kicked off the networks.