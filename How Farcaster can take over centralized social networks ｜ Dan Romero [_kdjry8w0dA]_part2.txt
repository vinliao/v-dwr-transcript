The same people who a year ago were saying, oh, build your own Twitter, or this is the right model for content moderation, have become staunch defenders of free speech and thinking that policies saying that you can't link to Mastodon or whatever are completely ridiculous, which they are. And so getting a network like Twitter to be a credibly neutral common ground like email or the web, I think, is a moral imperative. And then I think to go over to the reason, well, why don't you just make it completely decentralized? And so there's no centralized point of failure. Well, so first of all, our belief is if you actually make the identity decentralized, and then you still have centralized operators of kind of services, then that's the kind of like happy medium. So it's not like it's centralized relative to a decentralized thing. But like a purely decentralized system, something that's completely peer to peer, the usability isn't there. So it's ideologues. It's the year of desktop Linux. It's like, oh, well, if everyone just got a little smarter and more sophisticated, then we could have a utopia. But the reveal preference is consumers don't care. They care about usability and convenience. And so you have to marry the two. You have to have the core parts of the architecture be in a way that are sovereign, censorship resistant, whatever term you want. I like to use consumer choice, like I have pure freedom to move between different applications on the email network, as well as on a network like Forecaster. Same thing with a web host, right? And then you have to have the usability and performance and convenience that people expect. Otherwise, you're never going to get the audience to show up. Thus, even if you're publishing on this decentralized thing, you're just like, who cares if there are not that many people using it? And so the goal here is an Internet scale protocol that billions of people are using. And so if we if we want to get to that Internet scale, you have to have the users. And the users are only going to come if the user experience is good. But to your point, it's like, OK, should you go build a centralized company? Right. Just like a more developer centric version of Twitter. And I would I would argue that because of examples like Twitter pulling the rug out from under the developer platform, Facebook pulling the rug out from their developer platform, some of the stuff that's happened with the app stores on mobile is, I think developers are deeply skeptical of building on other people's platforms. Basically, the only company that's actually, like, I think, maintain a really, really good standing with developers for a long time. And I'm sure I'm ignorant. Some of the history where they may be less, less good is Microsoft. Right. It's like they I think realize and there's the famous quote. I think it was like Chamath was talking about Facebook being a platform and Bill Gates was in the room and Bill Gates was like, that's not a platform. Platform is when the aggregate value of all of the companies built on top of your thing is greater than the thing. And in the case of Microsoft, that's a pretty big thing. And so I think my my push is people are sophisticated enough to know why would I go build a business that now has platform risk? Because if you want to extract more rent from me, you're going to be able to do it. And I think the mobile app stores are a great example of this is, yes, there are actually a lot of big companies that are built on top of it. But over the last five years, those those policies have been more and more extractive as a result of this kind of like duopoly that exists within the mobile ecosystem. And so all the way back is I think that the only interesting way to get serious developers to build really at scale, interesting new companies and projects is to actually prove to them that they can't have the rug pulled out from under them. Thus, the the you need to make it centralized enough that the developer trust the network exists. Right. And going all the way back to how to define it. Another way I define forecasters, it guarantees two things. If I publish something and I have an audience, then the protocol itself should have no intermediator. You know, there's no intermediate intermediary between myself and my audience like that. It just just works. Right. We can have different service providers, but the protocol itself will distribute the message on the developer side. The developer should have permissionless access to the data and APIs for forever. Right. And that's one of the reasons we're working on this thing called Forecaster Hubs is when those launch, hopefully in May, the network will for the first time from a data and an API access standpoint, onboarding will still be gated. But from a data and API access standpoint, once you're once you're into Forecaster, you can do whatever you want with the network in the same way that you could with something like theory. And so that that's the focus of building a sufficiently decentralized network. It's trying to get the usability of Web 2 with the ownership, strong access guarantees of Web 3. Interesting when you're talking about the protocol, I was just thinking about SMTP and I was thinking that I don't even know who created or which company was involved, you know, into building that. And it's something that there's so many tools built on top of it. And I imagine that for Forecaster, who who hopefully hit a point where, like, we don't even know that Merkle Manufacturing, which, you know, you guys started, create Forecaster. It becomes such a used protocol that, you know, that would be nice, you know, in 100 years from now or 200 years from now, we look back and be like, oh, yeah. It was like actually Dan Romero and Varun that created this protocol that everyone uses. Related to, you know, the protocol and the network. So you both are building a product led protocol. So if I'm mistaken, you can correct me there, but it seems that you're building some sort of Twitter like experience on top of, you know, this protocol. And you are really focusing on making sure that the growth is very deliberate instead of letting users just flood the system. Why is that? Is there a benefit? And what are the pros and cons of that approach? I'll take it in two parts. So the first product led protocol goes back to this idea that you have to make it easy, usable, convenient for end users to use something. Right. Like, if it requires them installing some command line tool or compiling, like, never going to happen. Right. And so you have to make easy to use apps in order to actually bootstrap because you're building a social network. Right. And so the atomic unit here is a post or like and getting the social liquidity requires people to actually have ways of doing that. Right. Like, if the first step is, well, we have this protocol, build the client. And then if you have a client, then convince other people to show up and then we'll have an interesting protocol. Whereas I think we flipped it on on Ted is saying, if you want to get to the Internet scale protocol. You need a bunch of apps and services, apps and services are only going to show up if they're users. Right. Like, just assume everyone's lazy. Not not a bad way. Just like you have to do the work. And so in order to actually attract developers, you need a population of daily active users, because that's actually the hard thing. That's the thing that that developers like really want. Right. Like building the technical stuff is fun, but that's that's like achievable. Getting users is actually the hard thing, like more and more than anything else. In most cases. Right. There are examples of technology companies where the tech is the hard part. But generally, the software, it's getting users right distribution. And so our point of view is the thing that will be most attractive to building on top of Forecaster is if we have bootstrapped an initial user base of highly engaged, daily active users. Right. And an analogy here is the iPhone app store. Right. Which is an extremely successful developer platform. The first year the iPhone existed, there was no apps. You couldn't build a native app. Apple built all the native apps for the iPhone. And only after that first year, after they sold five, 10 million iPhones, did they launch the app store? And then they had an immediate marketing point where they could say, hey, we have five or 10 million people walking around that, you know, your daily active user, if you have a phone, because it's on your body. And so naturally became a place where developers wanted to start tinkering. And even then it took multiple years to finally get to a place where you had the native apps that kind of discovered the magic of what makes a mobile app like Instagram or WhatsApp. And so it takes time to kind of build those ecosystems. And so from our standpoint is, OK, well, if we want to get to this long term goal, the best way to start out is build the initial version of the protocol. No, it's not necessarily going to scale and then spend most of your time building the initial app. And we quickly realized that most of the features that are table stakes. To building a new social app, regardless of if there's some new mechanic, most of them look like Twitter, right? It's like the ability to post the ability to reply, the ability to get notifications, ability to like to follow. And so I think if you just think of it like, what is an MVP social network for the most part, it's something that looks like Twitter. And, yeah, the mechanics can be slightly different or very similar. But but that's like the foundation, right? Because if you if you just basically make a client that if you just think of Twitter is like kind of like a very simple generic structure. If you make a Twitter client that is primarily focused on images as the post, you have Instagram, right? If you make a client that is every post has to be a video. And instead of stacking them up, you auto play them and you only show one at a time. You have to talk. And so if you just think of these public social networks as kind of little bit of remixes and then UI changes on how they exist, then you can actually get to a place where far castor the protocol does the heavy lifting on identity. Authenticating messages, propagating messages, storing messages. And then handling how someone is replying to another person or the interactions that are happening between them. But other than that, developers can actually build whatever experience they want on top of it. And it's just actually displaying the same data in a very different way. Right? Just imagine taking tick tock. If all the social networks are built on an open standard, tick tock or Instagram could be totally displayed in a Twitter like feed. Like in Twitter, right? It would say the person's name, assuming you had the same user name across all of them. Geo just published a video on tick tock. And then you have a link to the tick tock. Or even embedded in there and then you click it. That's how Twitter does it versus the way tick tock auto plays. And so I think that that is the strategy on the product led protocol is bootstrap enough that now there's enough people using it that other people are going to be interested in building other apps. The second part on the onboarding side of things, we have a strong belief that quality is hard to maintain regardless. And the best time to have quality is at the beginning because you have the most control. Right? And if you actually have your quality dip too low, too fast, it's going to be very hard to attract. Right? If you have a low quality social network in terms of like you just invited as many people to juice your numbers, the high quality people don't really want to be there. And if you don't have those high quality people, like, those are the people that actually bring in audiences. And so our strategy was, well, why don't we just take this a little bit more gradual? We have a ton of stuff that we need to build and just try to be consistent. Grow 5% every week, send out X number of invites, measure that, see how the retention is, talk to users, figure out like what's working, what's not. And there's a secondary component of that with consumer apps. People actually make an initial judgment the first time they use an app. And it's very hard to unwind that judgment. Right? So, if I show up to an app in the early days, because I wanted to go for viral growth and outside of something being so compelling, right? Like, it is so different and new and not easily copyable, by the way, by another existing network. I might stick around even despite issues. So, like, be real is an interesting example of this, like, be real is a new primitive, like, very simple kind of game type social network. Can be copied by the other networks. I think that they're trying to play around with it. They've had issues where you try to load because everyone loads to be real at the same time per day and their servers don't work. But clearly they've hit into they've tapped into something that's so powerful that they're continuing to grow and retain users. So, outside of coming up with some new primitive that is so good, I think that the better, like, kind of like iterative approach, if you don't have that lightning in a bottle new feature, is keep your onboarding more limited and then iteratively improve it. And then you're naturally going to find a group of users that even the rough app resonates with and the incremental improvements that happen every week or every month is enough to keep them around. And I think you can build up cohorts of those people at a certain point. You actually start to hit a sufficient conversational liquidity that the people who originally would have turned because it wasn't interesting enough now are sticking around because it's going from kind of this bar that has, like, three people in it to it's like a really lively bar. So, even if you don't know everyone here, it's like, actually kind of fun to be there. And so that's the mentality that we have. All that said, we have 8000 people in a beta. Like, if you just think of orders of magnitude, that probably works for another maybe 10000 people or 20000 people. But to get to that next order of magnitude, 100000, I think we need to change our tactics and think through it's like, okay, how do you solve for that next order of magnitude? And then 100000 to a million is going to be a different challenge. Interesting. Yeah, I mean, in my experience, Forecaster has the best community out there for tech centric people. It seems that Forecaster is the new South Park where, you know, like all the builders in 10 years ago would gather around South Park, Twitter. Apparently, the idea came out in South Park. It seems that, you know, all the cool crypto people are in Forecaster and we see a lot of applications built on top of Forecaster and also other crypto applications that people use Forecaster to distribute. And it's a great platform to distribute. So I love that. You've mentioned in another interview that, you know, there is an analogy of using if addresses and you addresses, you know, with Facebook and whatnot. Are you approaching importing users that have if addresses? Is that right? And if so, why? Yeah, so I think it's worth identifying the initial niche that you hope to kind of like build some amount of community and traction with. And for us, it was naturally the like, Varun and I had both been at Coinbase for a while. We were kind of at home within the crypto world. And I think for me personally, like, I joined Coinbase, we were like Bitcoin only and I still own Bitcoin and I think highly of Bitcoin. But I think over my time at Coinbase, the natural community that I shifted towards was more oriented towards Ethereum because I tend to be more pragmatic. And I am much more interested in forward progress. And I think where my biggest critique with Bitcoin is, I think it's okay to be conservative. I actually, I really respect the kind of intellectual foundation of like, what they're trying to achieve. But I think what's challenging is going back to my point about centralization versus decentralization. You might actually have the high ground on ideals. And in the case of Bitcoin, obviously, there's, I think, the brand advantage and just market cap and being first mover. But I think it's very dangerous from a, like, the world is, they're competing things all over the, you know, all the time. Right. And so whether you like it or not, Bitcoin and Ethereum are competing for certain things. And I think what I like about Ethereum, there are plenty of things I don't necessarily like about Ethereum, but the thing I like about Ethereum is there's a sense of forward progress and an improvement towards, like, making this computing platform that you can go build anything on top of it. I can't build the forecaster identity registry on top of Bitcoin. And then you have a whole bunch of people to kind of like, say, oh, we'll build it on L2. It's like, no, no, I don't want to build it on L2. I want the security guarantees in L1. And so you can go back and forth on whether Bitcoin versus Ethereum, but the reality is, even if you said Bitcoin is more secure, Ethereum is the clear number 2. And so in that case, like, I would take Ethereum over any L2 experimental system, just from a Lindy, like, has survived some actually pretty big things in its history. And so, look, I hope to get to a point where a forecaster is actually just like anyone interested in anything wants to use it. But if I had to pick a community to go after, the one I best understood within the crypto world is Ethereum, right? I don't actually know really much about Solana, like, and Cosmos, other things like that. And so it's like, focus on Ethereum. That's my social network was there. And the other thing I think that's important is we actually just don't do that much on chain. And so, like, if you think about the existing forecaster client experience, yes, we show NFTs in the app. But it's not necessary. Like, you could go build a client that didn't have any of that. And in some ways, you can actually abstract away the stuff that's happening on chain in a way that you just do that one action on chain when you initially register. And then you could have a completely different experience the rest of the time. So it doesn't necessarily have to have anything to do with Ethereum. And so I think that my general philosophy is build something that people are actually going to use. That's the most important thing. And then from there, you kind of earn the right to expand out over time. Very interesting. Yeah. I sit in a very weird place myself because I like all these different communities and I find myself without a tribe. I think Bitcoin has a lot of value because it's very conservative. And if you know, if you're dealing with money, I think that's very, very important. I think a lot of people care about that. At the same time, I really like Ethereum because there's so many applications built on top of it. I mean, Uniswap is a clear example. Right. But there are some also newer protocols, you know, like Solana and Avalanche and Aptos and so on. We'll see which ones turn out to be actually, you know, sustainable and good and have a clear user base and developer base.