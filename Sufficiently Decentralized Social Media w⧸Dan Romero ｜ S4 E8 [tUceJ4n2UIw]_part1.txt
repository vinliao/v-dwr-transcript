Welcome to Rehash. Hey, everybody, welcome back to Rehash, a Web3 podcast. I'm your host, Diana Chen. And today we're speaking with Dan Romero, founder of Farcaster and Warpcast, all about decentralized social media and everything Dan is doing and building toward a more decentralized future. Dan was nominated by Triumph and voted onto the podcast by Madrash, Adam Levy, Tim Black, Scott Moore, Meg Lister, Triumph and an anonymous voter. Before we dive into our conversation, here's a quick word from the Web3 projects that helped make this season possible. Social media wasn't designed for ads and algorithms. It was made for people. And at Lens Protocol, we're putting people back in control. We're not looking for users' data. We're here to build a community of collaborators, builders, artists and dreamers ready to unlock a new world of social media. This isn't just an app. It's a flourishing ecosystem of platforms and experiences owned and operated by the developers and creators who are bringing it to life. In the Lensverse, you don't just own your content. You own everything. Your data, your connections, the value you bring to the table, it all stays in your possession exactly where it should be. As a creator, the Lens ecosystem offers a new set of tools for connecting with your audience. Your data is truly portable and belongs to you. Collect once and distribute everywhere in the Lensverse. You can even take your followers with you from app to app. As a developer, you can skip right past building the base layers and scaling your users by plugging your new app directly into Lens's existing infrastructure and community. So whether you create with a brush or a camera, sound waves or lines of code, it's time you got your due. Come create the future of social media with us on Lens Protocol. This is the last social media handle you'll ever need. Have you seen how epic Ambuyer Wallet is? How epic it is? Yeah. Cue the music. Ambuyer is a Web3 wallet that makes crypto self-custody easy and secure for everyone. Instead of relying on clunky seed phrases, you can create an account with the hardware wallet or username and password, secure it with two-factor authentication, and regain access with Ambuyer's cloud recovery. Need to pay out some contributors or execute a bunch of trades? No problem, chief. Cue up as many transactions as you want, and when you're ready, execute the entire batch at the same time, paying gas only once. You can even prepay for gas with stablecoins or Ambuyer's native wallet token, which will get you some cash back. Without ever leaving the Ambuyer interface, you can manage assets from over a dozen chains, safely migrate them with Ambuyer's built-in bridge, and seamlessly interact with apps like Uniswap, Aave, and Snapshot, all within the same transaction. Plus, Ambuyer is constantly growing their dApp catalog with trusted partners and collaborating with builders who want to establish the new standard for smart contract wallets. So pretty epic, huh? Yeah, I already know all that, though. I've had an Ambuyer wallet for months. And you didn't tell me? You never asked. To get involved and truly own your assets, go to ambuyer.com. How was your day? Bad. What happened? I bought some NFTs, and then they just disappeared. Sounds like your NFT creator should have used NFT.storage. NFT.what? NFT.storage! Come on, I'll show you! With NFT.storage, anyone can easily upload their NFT data to a decentralized and reliable storage network, completely for free! Wow! How does it work? Wellâ€¦ Instead of relying on centralized and impermanent storage solutions, NFT.storage uploads your files to IPFS and Filecoin. These are powerful peer-to-peer networks that are made for the decentralized web. Thanks to IPFS's unique storage system, you can be confident that once your files are uploaded, they'll be accessible from anywhere in the world for as long as you'd like. They're already trusted by some of the biggest names in Web3, like OpenSea, Magic Eden, and Rarible. By adding files to these networks for free, NFT.storage is helping to turn proper NFT data management into a public good. This will ensure that NFTs will remain accessible and secure in the long run, so you won't get rugged again. Gee, so I just upload my files and NFT.storage will take care of the rest? Now you're getting it! Go to NFT.storage today to upload some NFT data of your own, for free. And be sure to follow NFT.storage on Twitter at NFTDOTStorage. So without further ado, here is our guest, Dan Romero. Welcome to the podcast, Dan. How are you doing today? Thanks for having me. I'm doing well. Awesome. So you are one of the biggest names in decentralized social, when people think about that, they immediately think about you and they think about Farcaster and Warpcast now. But before we get into all of that, I kind of just want to pick your brain a little bit about decentralized social, about how we even got to this place that we're at now, having all of these things that we don't like about Web2 social and trying to build something better. So take us back all the way to the beginning. How did we get here to this very centralized ad-driven social media model where users are the product instead of the product being the product? So I think it's helpful to just go back to the beginning of the web, so Web1, and to think about that a lot of what was being built was being built on top of open protocols, specifically, you know, HTTP and the web. So you have Netscape, web browsers, and then all the kind of like first Web10, dotcom boom websites, right? So completely permissionless platform, you register domain, you can build whatever you want on that domain. So whether that's eBay or Amazon, it can be, you know, on the e-commerce side, but you could also put up a blog or whatever you want to do. Email is another example from that era, right? So everyone can go sign up again with a domain and you can get an email address. And for the average consumer, they ended up doing that through Gmail or Hotmail, but ultimately all email is built on top of a credibly neutral protocol called SMTP. Web2 comes along in the kind of like early aughts. And what it does really well is it increases the total number of people who are actually publishing stuff online, right? Like UGC was the term, user-generated content. And so you had all these new apps and services and then mobile made it even easier where someone who during the Web1 era, if they had to register domain and get a web host in order to put up a website, now you can just kind of go and sign up for Tumblr or, you know, Twitter and then you could actually start kind of posting pretty easily and get your message out there. So you had a massive increase in the total amount of people using the internet for publishing and user-generated content. But as a result, you had a lot of these networks get really, really large and they develop network effects and they were able to start kind of changing the kind of rules is the wrong term, but just kind of changing how they operated. So a good example, Twitter. Twitter in the early days was actually a very developer-friendly platform. They had like a very open API. Most of the early mobile apps for Twitter were actually built by third-party developers. And then around 2014, 2015, Twitter, thinking about going public, decided that, hey, we're actually going to severely limit what can be done via the API and kind of forced everyone on to the kind of default Twitter-owned Twitter client because that was better for monetization. And so I think that across the board with Web 2, you started kind of with this, still the idealistic vision of Web 1 and with this kind of convenience, ease of use. But fast forward to kind of 2020, all of these networks were kind of out of scale. And within a 10-year period, we went from people joking about like, why would you use Twitter? Like, no one cares about what you're having for lunch to Twitter is an existential threat to democracy. It needs to be regulated, dragging these people in front of Congress. And so I think the challenge for where we are now, and the term Web 3 is always gets people really upset, it feels like, because everyone has a different definition for it. But what I think is the opportunity for Web 3 right now is you can take the foundation of Web 1, which are these open protocols, and the ease of use and convenience that kind of Web 2 pioneered, especially on mobile, and can you kind of bring those two back together in some sort of harmony, where you have the kind of ownership and freedom and choice that Web 1 provides with that kind of what we've come to expect, like really high quality user experience of Web 2. That's kind of the dream for, I would say, Web 3 social. And there are a bunch of different ways of approaching that, Forecaster is one of those. Would you say that the original intentions of Web 1 are very similar to the intentions we have now with what we're trying to build with Web 3? I think intentions is always a little hard because, you know, A, it's historical, so hard to know what people are thinking exactly at the time outside of asking someone, right? Maybe Marc Andreessen could have told you what he was thinking in 1993 when he was working on Mosaic, which eventually became Netscape. I think the way these neutral protocols work in practice is actually the thing that I'm most excited about from where we can take things with a decentralized social networking protocol because we know what permissionless innovation did for the web, right? Like Airbnb didn't have to get approval to launch Airbnb, right? Whereas if you think about like the paradigm that we live under in the mobile ecosystem today, Apple can decide whether an app can exist or not, right? And so we see a lot of this today with crypto apps on the iPhone, you know, really restrictive rules around NFTs, like you can't even link to OpenSea. And so I think what I would like to kind of see is the world shift back a little bit more towards just how things operated with the web and frankly continue to operate with the web today, but have that both expand at the kind of like application development layer. So having that exist on the mobile platforms, which that's not even a Web 3 thing, that's maybe some policy change at the federal government level. But then as it relates to social networks, figuring out a way to take these kind of network effects that exist in these siloed centralized companies and move them more towards a protocol, which is credibly neutral. And that as a kind of user, I have the freedom to move between different applications and not have to worry about my audience being locked into one silo. And then as a developer, if I choose to build an application, the relationship I have with my application is between me and my users, not like some third party that can kind of revoke access. You know, we just saw this with Twitter, right? So I had mentioned before, there was a vibrant third party ecosystem in the early 2010s for Twitter. They kind of hamstrung that starting in 2014, 2015. But then there were still apps that existed for almost a decade, even in that hamstrung state that a couple of weeks ago, new ownership of Twitter, they decided that API is no longer a priority and they just got cut off. And so if you actually build a protocol based social network, that should never be able to happen. And I think that that's a big aspiration for where we're headed. Okay, so I want to dissect that a little bit. And you've already started getting into this. But just to take a step back, if you were to dissect the Twitter product bundle as it stands today, what are the primary elements that you would find there? And then I would love if you could also sort of compare and contrast that to a decentralized social product bundle and the elements that you would expect to find there. So I think that the core feature of Twitter is distribution. When it tells you anything otherwise, like, oh, it's a social network. The reality is, if I have a message that I want to get out into the world, and I have an audience, the best place in the world to do that is on Twitter, right? It's very simple. You can do it right on your phone. There's no video pre-production or all the stuff that's overhead of something like YouTube, or even TikTok. Maybe Instagram with just like being able to snap a photo is basically as easy. But those are the kind of two platforms where I think is like anyone who just has an audience can get a message out to that audience as fast as possible. And I think Twitter, that's the kind of core thing it provides. It wasn't necessarily that at the beginning, but that's what it's kind of evolved into. So the idea that if I have a large audience, I can get it instantly distributed to that audience on their phones in a real-time manner, that's the core of what Twitter provides. That said, there's a bunch of other things bundled with that. So there's an identity system, right? Your username on Twitter belongs to Twitter. You might build a lot of affinity around that name, and people might refer to you by your kind of Twitter handle. Like obviously on TV, they always kind of have it, but that can be taken away at any point. Another thing that Twitter is obviously providing you, especially in a world where there aren't third-party clients, is that they provide you with your feed. So as a user consuming content on Twitter, they kind of dictate what you're going to see in addition to any of the moderation decisions that they make. And the other point being is that hosting of the actual content exists on Twitter servers. So all of that kind of comes down to is you have to use Twitter and their terms of service and their set of rules if you want to access the distribution of Twitter. And contrast that to something like email, where if I have an email newsletter, let's say I have 100,000 subscribers for my email newsletter, I don't have to use any one email provider, right? I can actually shift between MailChimp and Substack pretty seamlessly, especially if you have your own domain, because then the end user doesn't even know you're sending it from a different service. It's kind of this plumbing in the background. That doesn't exist for Web2Social, right? So if you want to access the Twitter distribution that you've built, you have to use Twitter, and Twitter can decide if you have access to that distribution. Autowim can remove you. There's no recourse. You can't go argue in court, hey, I deserve my Twitter account back. YouTube, same thing. Instagram, the same thing. And so I think that that bundle is unfortunate in that if you can separate out the different elements and you as both the kind of like publisher or creator, you know, trying to speak to your audience, and or the user have the ability to choose different tools, whether it's like, okay, if I'm actually using Twitter for kind of like work, I might want to use a more power user tool that has all these bells and whistle features and analytics, whereas an average user, maybe I'm just consuming, I probably want something that's a little simpler, maybe more algorithmic. And so the ability to get to a world where you're not forced to use any one solution, and you can easily change between different applications based on the use case and kind of like what you're hoping to accomplish, that's what we're trying to achieve with Farkaster and fundamentally something different than Twitter, which to be fair to Twitter, in the early days of Twitter was actually very close to that, right? It was a centralized company. And Paul Graham actually has a great essay, 2009. You just Google Paul Graham Twitter, and it's very short, but he specifically talks about how Twitter is kind of, it should be a protocol, but somehow it ended up within a company. And in that early era, it felt like more like a protocol because of the open APIs, because of the fact that they were encouraging people to kind of experiment and innovate with the access to the data. But 10 years later, we're in a very, very different place. You raise a good point. I think that's something that actually a lot of people still struggle to understand is the difference between a protocol and an app. So Twitter as it stands today as an app, Farkaster is a decentralized social protocol, and then Warpcast is this like Twitter-like app that is built on top of the Farkaster protocol. Correct? Yeah. We just recently rebranded. So I think when we originally started out, my co-founder and I, we kind of wanted to just keep things simple. So Farkaster was the protocol and the app that you were using because no one else was built interested in building anything on top of Farkaster, the protocol. So it was actually pretty easy. It was just like, oh, download Farkaster and you can also use the protocol. We're now at a place where there are actually multiple teams and individuals building within the Farkaster ecosystem. And so they have different names for their apps. And we felt like it was the best long-term decision for the protocol to actually separate the name of the app that our team is building. And so we renamed it from Farkaster. So you can almost say it was like the official Farkaster app to Warpcast. And the analogy I always use is if you think about email, there is no official email app. Most people use Gmail, at least in the US. But I think that that's kind of clear to people that email and Gmail are two different things. And then within Ethereum, the basic example here is there's Ethereum and then there's Metamask. It's not like the official Ethereum wallet, even though Metamask kind of is tied in with consensus, which was kind of in the early days of Ethereum pretty involved. And so in our case, Farkaster, Warpcast, it'll continue to be painful for a while, especially for people who kind of like first onboarded where they like thought Farkaster, Farkaster. But I think in the long run, it'll just create a healthier ecosystem for the protocol that the protocol is this neutral thing. And you're one of many apps built on top of it. Yeah, I totally agree. I want to go back to the beginning days of Farkaster. You actually first had the idea for Farkaster as this RSS plus is what you called it. And you've got an article about this up on your website that people can go and read. But I would love to hear you talk about that original idea, how that came about and how it has shifted over time and morphed into what is today Farkaster. So I've been a big user of RSS and Twitter for 15 plus years. And when Google shut down Google Reader, for those on the audience who don't know what Google Reader was. So RSS is a protocol. It's very simple. It allows you, whether it's a blog or even today, podcasts are actually powered by RSS just to kind of syndicate out content over the internet. And you can kind of consume an RSS feed and then show it in any UI you want. In the early 2010s, there was a product from Google called Google Reader. And it was incredibly popular. It was actually almost too popular because they didn't charge any money for it. So it made the market for like kind of like premium RSS readers hard to monetize because Google was giving something away for free. But I think the kind of like flaw in RSS at the time, it was like pretty competitive with Twitter in terms of like the way you consume news or information, is that RSS is not as well suited or at least how RSS readers were designed to mobile. And so Twitter, and especially kind of that third party ecosystem of third party apps for Twitter, kind of really pioneered this like core like mobile UX of the feed. And in doing so, I think outcompeted RSS at that time for kind of being the primary way to if you're like kind of an info vore or just really want to know what's happening in the world, better to use a Twitter feed with, you know, and they didn't even really have an algo at that point, but, you know, Twitter feed with like the retweets and, you know, following a diverse set of sources than using kind of like an RSS reader. And so over the last 10 years, RSS has effectively withered away. It still has plenty of like power user folks who are using it, but like compared to the number of people who are using something like Twitter, you know, it's pretty minuscule. But what's powerful about RSS is it's a permissionless protocol, right? So if I put up an RSS feed on my website, I have one on my blog, anyone can use that as a standard kind of API for consuming content that is like newly posted to the blog and then can do whatever they want with it, right? There's no API key required. It's kind of this public standardized format. And so I think what we, you know, Verun and I having both worked at Coinbase for five years saw the power of permissionless protocols like Bitcoin and Ethereum.