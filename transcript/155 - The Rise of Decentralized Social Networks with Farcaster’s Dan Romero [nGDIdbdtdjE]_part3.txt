a lot of criticism that I've heard about Farcaster's futile to be working on this stuff because it's too crypto centric. Our point of view is we'd rather actually focus on what might seem like a niche, but a niche that is the future. And for us, if you can actually get the smartest people in crypto engaging in high quality way on this new social network, I think it'll naturally start to bring other people who are curious and because they're going to say, oh, this is high quality discourse, right? Vitalik is talking about the need for new institutions on Farcaster and he gets 40 replies that are actually thoughtful and not a lot of spam. That in of itself is also kind of interesting. And so I think for us, it's very much about we have to build a compelling product that people can use as a way of bootstrapping the actual protocol. Because if you can get to some semblance, whether it's 10,000 or 100,000 active users on the protocol, then I actually start to think that you're going to get critical mass for developers interested in building other new applications, which may actually increase the aperture, right? Someone goes, builds a very specific app that's dedicated to sports fans. We're never going to be the best at that. But if someone else has a great idea for that, and you already have a hundred thousand people who are actively using the protocol, that's your initial seed community. And then you bring in people who have no idea that this is all powered by crypto. They're just coming to use that app. So the initial use case here for Farcaster, the focus from a user persona, like the type of user that you want is like the full NFT crypto native type person. And they're going to want to migrate here because Twitter doesn't have the features, doesn't have the on-chain features that they actually want and need for their communities. Not the censorship resistance. Because I completely agree with you. The reveal preference is most people don't care, right? Like they only care when they eventually get booted, but for most people that doesn't happen. So Twitter actually works for them right now. So you have to have better features. You don't care Dan that right now the criticism people say, yeah, but the crypto native population is so small. I mean, what are we talking about? Maybe millions of people. How many daily active users does Metamask have? That's kind of your target market, basically. Your response to that is, I don't care. Cause that number's going up and it's going up real fast. Basically, I think that and people who are building the future are inevitably, that's where people are going to want to spend time. And I think if you were to look at early Twitter in 2007, 2008, it was a bunch of tech nerds in San Francisco who were going to South by Southwest. And that was the criticism. It's like, okay, this is just a bunch of nerds who would want to like share what they're having for breakfast. These people are narcissists. And maybe there's some truth to people who use Twitter. I use Twitter a lot that they're narcissists, but the reality is, is it turns out there are a lot of people in the world who find that interesting, even if they're not into tech, it just took 10 years to get there. We're about 10 years out from threatening democracies is what you're saying with hype. I have a threat of democracy, but yes, I think things that are that kind of impact, massive impact, things that are big, look small and are very easy to ridicule. And I mean, I saw this at Coinbase, like I, my, I was there in 2014, 2015, 2016. And so many people are like, why are you wasting your time on Bitcoin? Like, like did Bitcoin die? Like all that stuff. Right. And actually Ethereum was what really kickstarted, I think the second chapter for Coinbase. And then after the kind of like 2017 hype cycle, it was clear that like crypto wasn't going to go away, at least to smart people. And I think you've had multiple cycles. But I think generally, I think that that's the same thing is going to happen for, for decentralized social networks is people are going to say that, oh, they're a toy. They're never going to hit scale. Like, you know, it's impossible to beat Facebook and all this kind of stuff. But look, I mean, if people say that you can't like compete with Facebook, one TikTok went from zero to whatever it is today in a very short period of time. And, and Facebook really hasn't been able to compete with that. So, A, that's a, that's a counter example that you can compete. And then two, we're seeing this even now, like people said last year, Google is, you can't compete with Google. And then all of a sudden, chat GPT shows up. And then people were like, oh my goodness, like this is going to replace Google. And I think that's probably overblown. But, but if you're working in technology and you're working in an area where there's just constant innovation and things are getting pushed forward to have the point of view that, that we're just going to be in this stasis where it's like impossible to beat the big guys. People used to say that about Microsoft and IBM. And, and so it's like, it's just like a lack of history for, for most of these folks. And so I'm, I'm completely fine being ignored for a while. All I want to do is make incremental progress every week, grow, grow the user base 5% every week, find people who are interested in the features that we're building, right. These crypto native features that aren't being built on other social networks. And this is the home for them. And over time, I think that the market gets big enough. And fortunately, I think we have a long-term perspective on that. It worked for Coinbase and hopefully it works for Farcaster. This Ryan reminds me of Chris Dixon's take that he had when we were talking to him way back when about how A16Z used to be called an internet fund. And then it just became a fund because the internet took over. And he's, his take was that that's going to be the same thing for crypto. It's like first A16Z's got like a crypto fund, but that's just going to take over what venture capital is because everything's going to become on crypto. And I think that's the same take that Dan's leading with is like, there's a population of highly engaged crypto people that crypto populations up only. And in the future, fast forward, five, 10 years, the crypto people are just the internet goers that we know of today. Dan, there's a, there's a, I want to drill down into this client centric design of a decentralized social network. Cause my take coming into this podcast is that there's actually no way to produce a decentralized social network without it being a client centric ecosystem. And also something you said earlier is about like, we can, we can create like a specific thing for sports fans that's built on Farcaster and it's just optimized for them. They don't even know that it's crypto. Uh, and this also goes back to what we were talking about earlier with like the open model for Twitter or Facebook, where there was like an app ecosystem and anyone can build on top of Twitter. The, the take, the belief I have is that that kind of open design allows for these systems to adapt and flex to the wants of their users. Like when many, many developers can build on top of something, they will build something that's fundamentally useful or, or, or it's not. And they stopped building it or it is, and they continue building it and they continue refining it. But first and foremost, it takes that, uh, open model, that open API model, that open design model to actually allow for developers to kind of believe that there's something useful there that they want to build and then go build it. And in stark contrast to the current web two model, the current web two world, where like, if you open up Twitter on the browser and then you open up Twitter on the phone, it's the same Twitter, same thing with Facebook. Like if you open up Facebook on the internet, facebook.com or the Facebook, the app, it's the same Facebook. But like, I'm, my intuition tells me that something with a decentralized social network, that's a very client heavy ecosystem is that it can change shape. It can change form based off of how you want it to be or who you are or the clients that you're using because you want to engage with it in a particular way. Can you elaborate on this like unique property of a decentralized social network? And I'm actually having trouble understanding what you mean by client centric. What does that even mean? Maybe the question for David and Dan too. Yeah. So the way I think about it is we want to build an internet scale protocol, internet scale protocol is going to have billions of people using it. And there are going to be many apps and services built on top of it. In order to get the many apps and services built on top of it to have those billions of people, you need developers interested in building. Developers are going to build on the thing that makes it easy for them to find users, right? The reason people build on mobile app stores, despite the 30% tax and all the ring of morale that they make you go through is when you have a phone, it's attached to your body when you're a daily active user of a phone. So it's this amazing platform to be able to build, get someone on, you know, to install your app, then you have push notifications. And so Apple has been able to bootstrap a huge ecosystem by virtue of actually just getting people to buy their phones and then hold them on their body all the time. So we wanted to take the same approach where the way to kickstart the Forecaster ecosystem is build the initial client, build some of these features that get people into the door. A lot of people didn't find them that interesting, but there were enough people that found them interesting that we were able to kind of create an initial kernel of users, highly engaged users, that once you hit a certain amount of conversational liquidity, so if you think of like DeFi, you need like TVL or whatever, that for social networks is, especially a public social network, if I open up the app, is there something new to see, right? And if it's too stale, then you're just going to have people turn. Whereas if you can kind of beg, borrow and steal, whatever you need to do to actually bootstrap that initial community, then what you can do is use the initial client to continue to onboard people, continue to grow the total number of addressable users on the protocol. But you're going to have developers start to tinker around because now there's all this data and there are all these users. And so we've seen, you know, a whole bunch of different apps built on top of the initial set of Forecaster APIs, which I think are really, really bad, but it just shows you that there's a lot of demand. People love playing around with this stuff because they didn't have to ask us for anything. They can just, once they, you know, want to build it, they can just go and do it. And it'll only get better later this year when we have hubs and we hit the bar around permissionlessness. But I think the, to go back to this kind of like why we think the client ecosystem is so important to get right, it goes back to your point of, or rather, if you think about what the hard thing is when building a social network, yes, it's coming up with some novel new mechanic and idea, but there are plenty of examples of people having built social networks with the mechanic maybe, you know, five years too early or whatever. And it's not on the merit of the idea. It's all about distribution and getting users. And so what we're trying to do is dramatically reduce the difficulty in having an app that has social features. People are already going to have an identity. They don't need to be onboarded again. They're going to potentially have all of this public data because it's a network like Twitter that you could potentially use machine learning to figure out what their preferences are. So I could, if I built that sports client, that's like if you're really into football and you had already talked about that you're a, I don't know, Vikings or a Giants fan in one of your casts before, I programmatically can kind of go look back. And then when you open up the app, it's like, it already auto-suggests what you're interested in. And so this access to the like foundational identity, the actual data, like what you're posting, what you're liking, who you're following, all of that information that is available, another developer can actually use to bootstrap their new app. And so making it easier, dramatically easier for new social apps to be built, because as a user, I don't need to re-sign up for like the whole system. And then similarly, like they can actually do a lot of intelligent stuff based on all the publicly available data, gets you to a place where it can be a shared layer of identity of the data. And then actually the other thing about it is you can now use it for distribution, right? And so we actually just had an app come out this weekend, still early stage called Absorb. And what they're doing is they're using the Forecaster protocol to post seven second videos in an, you know, oh divine. And the way it works in our client, it's going to show up where it says, I just posted a video to Absorb, click here. And we don't even have video in our client yet. We just haven't gotten around to putting that in there. But if you were to open up Absorb, it's actually going to show you all the other posts that are on the Forecaster protocol that follow that format in a very Vine or TikTok like way. And so it's using a subset of the protocol for all the kind of like primitives that is available to it. But then it can actually just build a completely new experience. And let's say that app starts to get bigger. Maybe there are plenty of people who use that app who don't even know that it's using Forecaster or crypto. It's just like, oh, cool. This is like some app where you have a bunch of people doing what they're doing. And maybe they come up with some new novel mechanic that's slightly different from Vine or TikTok that does really well with a certain sub segment of users. Great. That's all benefiting the Forecaster protocol and they're benefiting from the Forecaster protocol as well. So it's pretty symbiotic. I mean, I get all this and that's why I was kind of questioning, David, like why you call this a client centric design? Because to me, that's not, it's protocol centric really. What Dan is saying is we're doing the base protocol so that anyone can build a client on top of it. We're just bootstrapping the very first client in order to get people, that's like our bootloader for the client. But the value is really, is kind of the protocol. It's like as if Twitter released the Twitter website and the app in the early days. And then also a protocol that anyone could build on top of that was completely rugless. Or it's as if RSS, you know, RSS didn't pick up in many ways when RSS was first introduced. Well, maybe that was because RSS, there was never a kind of a company developing the first client for RSS and kind of like acting as a bootloader. So that's why I was asking David, why you called it a client centric design? Don't you mean like protocol centric design? Yes. Yeah. Protocol centric as in there's one Forecaster protocol. I guess what I meant by client centric is that whereas Twitter and Facebook are highly monopolistic and don't encourage a expressivity in having many, many, many clients, Forecaster does. And so it's putting clients as like, yo, we need clients. Clients need to be a first class citizen because there's many different ways to access the Forecaster protocol. And each client can pick and choose their own particular way of accessing the Forecaster protocol. And those different choices will be determined by the users of that particular client. But it's really like Forecaster winning like a thumb war in like protocol design. Whereas like in theory, there could be a Forecaster protocol and then there could be like the Facebook of Forecaster and the Twitter of Forecaster. Like these things can become apps. And the fact that Forecaster is a protocol is like you could have the Twitter app that is built on top of the Forecaster protocol. So yes, Ryan, you're right when it's there's like protocol centric, but the idea of a Cambrian explosion of specific clients that are built for specific purposes for specific audiences is what's missing from the Web2 world that makes it so like stagnant and stale and monopolistic. Dan, does all of this stuff check out? Yeah. And maybe to marry the two together, I would say it's the protocol is only good as good as the clients that are available for it, right? Because you could have technically brilliant protocol, but if there's no way for people to use it and use it like in a really highly usable way that they can install on their home screen, right? Because it is actually a battle for your thumbs. Are you going to hit Instagram or Twitter or you're going to hit Forecaster or some other app that's built on top of it? That's zero sum social like time is a zero sum thing and that's what you're competing for in social. And so in order to make the protocol useful, you need at least one client, right? And one client that's hopefully driven a whole bunch of users. Then I actually think the protocol, it's kind of a flywheel, right? So it's now you've actually bootstrapped it with some users. Now the protocol starts to be more attractive for other people to build clients. And then hopefully it kind of ping pongs back and forth there, whereas the more clients and more diversity of clients and different experiences you have, the more growth you're going to have for the protocol, the more growth for the protocol, the more people are interested in building clients. And so I think that is where we have been really, really focused. And what might differentiate us from others is we plan to work on our client, like this initial bootstrapping client for a very long time, if not forever, because I think for us, it forces us to dog food the protocol that we're expecting other people to build on. And so it's inevitably, we are going to know the pain points and the frustrations as a developer. It's like, wow, this is really hard. How could we, if we can't do it ourselves, or this is a pain in the ass for us to do, why would we expect anyone else to go through this? Like they're just probably going to go build somewhere else. And so by being kind of like putting ourselves as a developer on the protocol, it makes the protocol better because we're developing the protocol, but it also going back to what makes the protocol successful, it's getting users to use the protocol who become addressable users for other apps on the protocol. And so that's where I think the client and protocol aspects of the designer are critical, and they're very intertwined. Uniswap is the largest on-chain marketplace for self-custody digital assets. Uniswap is of course a decentralized exchange, but you know this because you've been listening to Bankless. But did you know that the Uniswap web app has a shiny new fiat on-RAM? Now you could go directly from fiat in your bank to tokens in DeFi inside of Uniswap. Not only that, but Polygon, Arbitrum, and Optimism Layer 2s are supported right out of the gate, but that's just DeFi. Uniswap is also an NFT aggregator, letting you find more listings for the best prices across the NFT world. With Uniswap, you can sweep floors on multiple NFTs and Uniswap's universal router will optimize your gas fees for you. Uniswap is making it as easy as possible to go from bank account to bankless assets across Ethereum, and we couldn't be more thankful for having them as a sponsor. So go to app.uniswap.org today to buy, sell, or swap tokens and NFTs. Arbitrum 1 is pioneering the world of secure Ethereum scalability and is continuing to accelerate the Web3 landscape. Hundreds of projects have already deployed on Arbitrum 1, producing flourishing DeFi and NFT ecosystems. With the recent addition of Arbitrum Nova, gaming and social dApps like Reddit are also now calling Arbitrum home. Both Arbitrum 1 and Nova leverage the security and decentralization of Ethereum and provide a builder experience that's intuitive, familiar, and fully EVM-compatible. On Arbitrum, both builders and users will experience faster transaction speeds with significantly lower gas fees. With Arbitrum's recent migration to Arbitrum Nitro, it's also now 10 times faster than before. Visit arbitrum.io where you can join the community, dive into the developer docs, bridge your assets, and start building your first dApp. With Arbitrum, experience Web3 development the way it was meant to be. Secure, fast, cheap, and friction-free. I think Web2 users, which I know is everyone, can really resonate with this fixed state of the Web2 world. Why hasn't there been a new Web2 app that's come out in the last decade? We almost had, what was that? The audio clubhouse. We almost had clubhouse. Clubhouse took us by storm in the middle of COVID. We almost had a new one, but then what happened? Twitter just absorbed that feature into their monopoly of Twitter and took away that. Dan, you've been calling this cool new mechanism that it justifies a new social media app. But then all of these Web2 companies just absorbed those features into their larger centralized stack. I think one of the things that you alluded to is that as the farcaster protocol grows in users and utility, when somebody thinks up of a new mechanism like clubhouse did, that can be appended to the farcaster protocol via a client, but not actually have to compete with the other clients on farcaster because everyone is contributing to the growth of this protocol. It's a little bit like how I view the Ethereum layer 2 ecosystem. When Optimism wins and grows users in TVL, their net overflow of that also benefits all the other layer 2s on Ethereum. That's net beneficial to Arbitrum because when Optimism finds a new user, they're just one hop away from Arbitrum.