Hello and welcome back to Crypto Sapiens. I'm your host, Humpty Calderon. And today we're talking to Dan Romero, co-founder at Farcaster. In our conversation, we will talk about the rise of decentralized social, different levels of decentralization, and why Farcaster has chosen a sufficiently decentralized approach. And if you don't know what that means, it's okay, we're going to get into it. We'll also be covering the different identity systems that are used in Farcaster, as well as content moderation and decentralized networks, as well as exploring the permissionless innovation ecosystem that has been built for developers there. And this is evident by the growing number of applications that are being built there. So as always, there's lots to unpack here. So let's get started. So first of all, thanks for having me. I grew up in Massachusetts, went to school on the East Coast, worked in Boston for a few years, and then moved to Silicon Valley in 2013. And was looking to work in tech, something that I had kind of always wanted to do. And the first year I was working at a SaaS company and read the Bitcoin white paper. And ultimately got really excited about Bitcoin and the potential for cryptocurrencies as a new computing platform, right? 2013 is kind of like peak mobile era. Instagram had been acquired the year before, WhatsApp gets acquired the next year. And so I made the hop over to Coinbase in 2014, thinking that crypto was the next big wave in technology. And I think it was a little early on that. And arguably, it's still pretty early for crypto. But Coinbase ended up being the kind of like right place at the right time, at least within the crypto ecosystem. Albeit, the first two years were pretty slow. And I was there for a total of five years. And then in 2019, left, took some time off. And while I was off, reconnected with an ex-Coinbase colleague of mine, Varun Srinivasan. And we started working on some new, you know, potential ideas for a new project. And the idea that we both got excited about was answering the question, how could you make RSS competitive with Twitter? And so the initial name of the project was RSS Plus. And that ultimately turned into Farcaster, which we've been working on for the last two years. That's a really interesting trajectory. You know, and I had a question that I wanted to save for a little later, but it sounds like we're almost touching on it now. So I'm just going to start with that. And you know, one of the things that I've noticed personally is this introduction of decentralized social across a variety of different blockchains. You know, you have Lens over at Polygon. I've recently learned of Noster. Over at Lightning, we have Farcaster, which I believe would be an Ethereum-native application. Tell me a little bit about this idea of decentralized social as, you know, this killer app, if you will, on blockchains. Is that really like a monumental shift from the way that we think about blockchain? Yeah, so I think it's worth parsing apart. Why should we have a decentralized social network? Why is that important? And then the implementation. And so as it relates to the, you know, having a decentralized social network, I think I start from the place of the two things that we're really trying to optimize for are, one, anyone who has an audience on Forecaster, that relationship between, you know, themselves and their audience, that's direct. And so there's no third party that can come along and say, sorry, you violated a terms of service or we're going to arbitrarily kick you off the platform. And by the way, you lose access to the kind of like bi-directional relationship that you had kind of established on that platform. Two most prominent examples, if you spend a long time on Twitter building up an audience or you spend a long time on something like YouTube building an audience, they can just turn you off at any point. There's no ability to export your followers before you leave and say, hey, you know, follow me here, you know, contrast that to something like Substack, where if I am using Substack and I switch to using an alternative email newsletter, I'm able to move my subscriber list. That's a norm within the email network, which happens to be a web one decentralized permissionless network or protocol. And so that's the first thing that we're optimizing for with something like Forecaster. The second thing, and this is important because I think to make a protocol successful, you actually have to have many apps and services built on top of it. If it's just kind of like an open API for a company that can change, right? You can have a new regime show up and Twitter in the early days was actually a very open API ecosystem. And as of recently, they've effectively shut that entire third party ecosystem, at least from the client standpoint down. And that's a regime change, right? So you go from one group and there was the pre-public Twitter versus the post-public Twitter versus the Elon-owned Twitter. So that can change pretty quickly. Facebook, another good example, Zynga built on top of Facebook in the early days. They changed the way they were doing things or their strategy that disproportionately hurts Zynga. So the idea of platform risk is real. And what we're trying to do with a network like Forecaster is allow developers to have direct access to the data and APIs at the network level. And any relationship they have with the user is again, a direct relationship between the developer and the user, which is very common, obviously on the web or in email. Desktop software is pretty similar in the sense that, you know, if you download my browser, Apple probably isn't going to uninstall it from the machine, right? They probably would like to at this point, given how successful they've been with the iOS app store and the kind of wall garden approach there. But I think a lot of what happens in technology is if the norms are strong enough early on, they're very hard to change later. Whereas mobile, the modern era of mobile effectively has never been an open ecosystem. So therefore things tend to be a little bit more restricted. So with Forecaster, we were trying to make essentially an unruggable, you can't have someone pull out the rug from under you as a developer. And that's at the kind of protocol level. So direct relationship between a publisher, creator and their audience and direct relationship, data APIs and users for developers. And then as it relates to how there are different implementations of decentralized social networks. So you have, I'd say two buckets. So you have the ones that use blockchains, and then you have the ones that don't use blockchains. And the ones that don't use blockchains are actually larger in terms of total number of monthly active users. And they're a little bit older, Mastodon being the most prominent, but you have BlueSky, which is working on kind of another approach, which is federated. Nostra actually doesn't use a blockchain. It uses just public private keys. It's like Bitcoin friendly, and I would call it Bitcoin adjacent. Like you can do lightning payments in the apps, but from a fundamental where the identity lives, that is actually just a attestation. And that's actually one of the things that I would say we're trying to solve for with Farcaster is in the federated type systems, identity is actually a very tricky thing, at least from a user experience standpoint. Right? Yeah, we use email today, which actually uses the domain name system. But I think a lot of the challenges of email, right, phishing, and all of the stuff that I think if you're not as sophisticated of a user, you kind of sometimes get confused about email. That's because the system email was designed for really technical users, because it was an academic system originally that just, you know, took off. Contrast that to something like Twitter or Instagram, where you have just a simple at username, right? You can be at Humpty, I can be at DWR, and that there's only one, right? And so that is an optimization that can happen when you start to actually put the identity layer rather than it being federated. Okay? And every server design designs which identity you have. It moves to kind of a blockchain based model, where now the kind of identity is stored on chain, and then there are varying degrees of what else is stored on chain. So in the case of Farcaster, the only thing we do on chain is the identity mapping, because we think that that's actually the critical thing to take out of the hands of any one individual company, organization, country, right? Shouldn't live on a server, it should live kind of in this kind of credibly neutral common ground, which Ethereum can provide. And then for the rest of the stuff that we do with Farcaster, it's actually all off chain. So our view is, if you do stuff on chain, even if you're doing it on a cheaper chain, gas costs are going to increase over time, because by definition, as the chain gets more popular, the bandwidth can't increase infinitely. It just, there's a gravity to it. And so at some point, you're going to hit the max amount of block space. And so you either less decentralization on that chain, which that has a set of trade-offs, or you increase gas costs. And so our view is to use social media outside of maybe the signup, which is what we're betting on, it should be completely free, should just be like normal web 2. And so that's what our architecture does. I think some alternative blockchain-based decentralized social networks or protocols, they tend to put more stuff on chain. And our view is it doesn't actually solve anything by putting more stuff on chain. Yes, you might get a little bit of composability for, you know, if, for example, a follow or like is an NFT, then you can in theory sell it. But our bet is that most of those things don't actually matter from a composability standpoint. And what you really care about with a decentralized social network is if you go back to what people use centralized social networks for, at least the public ones, right? Like put Facebook in a messaging app to the side, because it's a slightly different use case. But the big public, I have a profile, anyone could follow me networks, it's about distribution, right? I'm assuming you have profiles on all these public networks. And then when you put out a podcast, you put a link to the podcast and all of them with the hopes of reaching the widest audience possible. And so our point of view is that is the problem to just like hone in and on and solve and sufficiently decentralized the network to the point where if the only thing that's on chain is the identity, and then you can actually have every piece of kind of content on Forecaster tie back to that identity on chain through a cryptographic signature is what we do, then you can actually get the best of both worlds in that you can get that kind of usability, the speed, you know, user experience, all that great stuff from Web2. And that's important because you're trying to get as many people to use it because then that actually attracts people who want to publish right that the audience. And then you also have the strong ownership guarantees of Web3, right? No company, country, individual can come in and muck around with. Yeah, it sounds like at least from what I'm taking away from what you've said pretty eloquently here is you're solving for distribution while still trying to or while also trying to provide the user with a level of self sovereignty and portability, right? And interoperability with their identity. I think that's pretty excellent. I like this idea too of considering efficiency in terms of how you're building out the platform. Because I don't think yet that we've seen a blockchain that claims to be faster and cheaper when they do become popular actually maintain that promise, right? Because as a blockchain becomes busier than obviously the, you know, transaction speeds might diminish a bit and the costs definitely go up. So that's an interesting way of thinking about it. And so this idea of decentralized enough, which I definitely hear and read a lot about when I think about Podcaster, I think resonates at least with me with what you've just said. One thing that I kind of want to explore, because you brought up identity and I kind of want to touch on this because it seems like also you're exploring how identity is works on Podcaster. You have two different identity systems, right? And so you have one identity system that's persistent and one that's that is changing, correct? Or changeable, not changing, but changeable. Yeah. Tell me a little bit about some of the challenges that you've seen in other identity systems where they're not changeable, where you get access to that, like at Humpty over on Twitter, for instance, and then I don't use it for years and then it just stays there unused. Or if I have my ENS, for instance, at Humpty, for instance, and I, you know, and someone else needs it, but I'm just sitting on it because I'm speculating on it. Are those some of the things that you're considering or is it something else? Our approach to how to make Podcaster work first starts with the product experience. And one of the important things here is we built the initial client. So none of this is abstract, like everything is rooted in how people use the app and the user experience and what's confusing for people, et cetera. Our point of view is that in 2023, we live in a world where Twitter exists, Instagram exists, usernames are a superior user experience than the equivalent of an email address. And I actually think that they're superior user experience to something like a phone number. So if you actually look at the history of identity systems on the internet, you start with servers, websites, move to email once you have these platforms that I can log in, use email as the identifier to be almost like the public and private key. But then the username actually lives within the system, right? My username on Twitter, my username on Instagram, and most websites implement some version of the username. So it's a concept of, I think, a popular consumer app where you have a global username, modulo, email, right? And then we can put that to the side. I think the next iteration that happened is instead of using email as the identifier, most mobile apps at scale used phone number, right? WhatsApp being a prominent example, but it's just a superior user experience for most people. Instead of having to muck around in their email, which might be hard to find, you can just get the text message. Google has that really nice thing, same with Google, where they pre-populate the code and it just kind of works. And so phone numbers are actually more popular than email addresses from a daily active user standpoint. If you think about most people globally, email is actually more of a web one or developed. You probably have a computer, not just a mobile phone. So I think that is the progression. And so from our standpoint is we are not going to regress from the username approach. And so what we can do is we can swap out the Ethereum address being the kind of like public and private key, the authentication mechanism, but the actual user experience, how a user uses the app, the identity should be kind of a simple human readable name, should be no more than 16 characters. I think Twitter actually nailed that. I think generally longer names get really confusing for people. I think Latin alphabet, for better, for worse, it's a constrained set of characters, right? So if you actually let any Unicode character be used, there's something called the homogliphic attack where there's a whole bunch of different subtle changes in the whole Unicode spec, like all the potential characters you can put on a computer that for the human eye, it looks like an E. And you've probably seen this. Sometimes there's like weird formatting in a tweet. It's actually because Twitter, I think, supports Unicode. So what people are doing, it's not like Twitter has like a little, like you can format in bold things. It's actually people writing Unicode and then putting it into the tweet, which if you were to like search for that, most search engines are doing a character match. And so actually like that isn't the same character to the computer, but to the human eye, it looks the same. And so you actually run into these issues where I could be DWR, but if I give the full Unicode set, you could be using a D that has like a little subtle pixel to the bottom that, you know, in some language actually makes sense. But for the average user, now they think this is DWR and it's actually a scammer. And so I actually do think Twitter and Instagram, like they've figured that out in the sense that like make the global namespace somewhat constrained and it actually increases trust. And then I think that the last thing on the identity side of things is what you mentioned. There's a concept of a fixed identifier on Farcaster. We call it an FID, the Farcaster ID, just the incrementing number of user you are. So if you're the 623rd user on Farcaster, that's your FID. And the smart contract just increments one at a time. You can't like get your own or the whole point is not to switch. It's supposed to be subtracted away from the user, but it's important because if you actually think about how a system like Twitter or Instagram works, you're not represented by your username internally. You're represented by the database ID number and when you signed up, because in both cases, you are able to change your username, which is actually a very friendly user thing, right? You can turn it off, maybe you have a less great username, get really popular. You know, you're using this as a creator to do your business and maybe people think that it doesn't matter, but people actually get emotionally tied to these names. So if you can go from like, imagine if it was like Humpty1237 and then eventually you got to Humpty, you want that ability to change the name. If everything is mapped to a username, so if you were to use an ENS as a name on a social network, in a user controlled decentralized social network, you can't force someone to follow a different username. So you actually would never upgrade your username. So it's a less desirable user experience. And so by separating the Forecaster ID, which is permanent and the username, you can retain your followers and all of the kind of stuff that you've done while being able to swap in potentially a new username. And effectively, as your identity changes over time, which there is a component to all of our identity that changes, you're able to do that. And so that's actually something that's like, I think, really important. And if you actually think a lot of these systems, if you map to a username, by definition, if the system is user controlled, right, it's like there is no central authority that can just map everything again, over from a following standpoint, you're locked into a username. And so if you're on a server on Macedon, right, just like an email address, and they kick you off and everyone's following that you lose your audience. So it's actually, you know, like, potentially even more capricious and arbitrary, because at least Twitter, like if they de-platform a high profile person, because it's so big, it's going to attract some amount of attention. So there's this natural check, and maybe you believe Elon doesn't want to get people off the platform. But if you're on some small 500 person Macedon server, but you've built up a big audience and the server admin kicks you off, you lose that audience. And so I think it goes all the way back to is that these public social networks are about allowing people with an audience to have more sovereignty over that audience. And the way to do that is by creating a community.