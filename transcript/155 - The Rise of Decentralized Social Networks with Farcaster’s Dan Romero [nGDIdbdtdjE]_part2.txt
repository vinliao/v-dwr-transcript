systems that already exist, Twitter, Facebook, and then make them decentralized in a more open environment. But also, what does Web3 native social networks enable that Web2 social networks will never really be able to enable? So there's like some conversations which are like, we can, a decentralized Web3 version of Twitter can help with making sure that people don't get deplatformed but that's only about fixing Web2's faults. What about these more decentralized social networks? What can they really enable that Web2 will never really be able to enable? What's the unique properties, what unique properties about Web3 social will Web2 never really be able to have? I wanna start with first, going back to this idea of developers having permissionless access to the data and APIs. I think that in of itself is underrated in that if you allow developers complete freedom to do whatever they want, they're unbounded in terms of, if they have a creative idea, they can go do it. And then they have to convince other people to use it as a separate thing, but there are no API terms of service that they necessarily need to worry about. And I think that alone is actually an important thing. And whether you call that, oh, you could build that in Web2 or Web3, but put it to the side is like that just existing is a primary motivation for building something like Forecaster. As it relates to more specific features around cryptocurrencies, we can talk a couple. We have one today. So we actually allow you to connect another wallet within Forecaster. And so you can kind of have a native newsfeed of what the people you're following, you're following them for the Twitter-like content, like small text posts, but also what's happening on chain. And so you're kind of getting this blended newsfeed of the kind of stuff that they're talking about, but then also what people are actually doing on the blockchain, which it natively starts to create conversational points around anything that you are doing on chain. You met an NFT, now that natively shows up in the feed, which now NFTs, instead of being this kind of single player thing can now be more multiplayer. Composability of feeds. Exactly. So that, and then I think that the other thing, Forecaster's namespace account, right? Like the way you kind of define yourself is also an NFT. And so that's gonna be an Ethereum L1 next year. And so then you get all the composability that can happen with an NFT. So you could have an account that's owned by a group of people right, and you could have a New York City 20 token associated with that. And I don't know, use a nouns DAO, style governance. Like it's just like the possibilities are endless in terms of ownership of a given account. So there's gonna be a lot of composable stuff that will happen there. And then I think the other important thing is every user on Forecaster by definition has a working public and private key, happens to be an Ethereum address. And if you think about what that all of a sudden starts to enable, you can out of the box have end to end encrypted direct messaging that is as good as, and in some ways better because you don't need to have a phone number associated with it. Another example that you can start to kind of think about because there's a lot of development that's happening in zero knowledge proofs is you kind of have all these academic potential uses of zero knowledge proofs that now can be developed permissionlessly by any developer because you can make the strong assumption that every user already has a live working public and private key. And so you could potentially make new types of speech that is kind of like based on some amount of on-chain credential, but at the same time you don't necessarily have to reveal who you are. So a basic example would be, I own a CryptoPunk. I wanna actually be able to say something anonymously, but have the credibility to say, I own a CryptoPunk. If that's something that matters to you. But you could imagine other types of on-chain credentials that could be, I don't know, around politics or around medicine. And now I could be a doctor who is well-regarded, right? Maybe I've won some prestigious medal in the field and I wanna speak up about something in medicine, but I feel like if I was to do that under my real name, I would get a lot of pushback from the community versus I could say something, have the credential that is provable on-chain and actually do that in a zero knowledge way. So I think those primitives are going to allow developers to have just kind of a lot of creativity in what they build. And so we're really focused on building the core level set of primitives and then really trying to make it a developer platform that you build Uniswap, you get, or sorry, you build Ethereum, then you eventually get Uniswap or OpenSea and you start to get people's creativity is actually what drives the growth and the use cases. Okay, Dan, we're definitely peering at the top of this very large rabbit hole, which is this whole entire conversation of more decentralized social networks. And we've touched on a bunch of different possible like paths that we can go down. I wanna go back to one that we've already started to go down and I really want to drive this point home because I think it is at the basement of what is a very large stack of cool, awesome expressivity of developers and users on top of it. And it goes back to what you said about assurances around like the open API structure or like the assurances that developers can develop on this platform and not get rugged. Cause that's a big talking point about like, even like Facebook's like changing or closing down their APIs. This conversation goes back to like, why does Ethereum exist? To build unstoppable applications. And this also is a very core property, a very core theme of what we often frequently talk about at Bankless, which is settlement assurances. We use the term settlement assurances to describe property rights. Like why is Ethereum and Bitcoin different than like Litecoin or insert your faster, smaller blockchain here? It's because of settlement assurances. You are assured that your property is yours because of how strong the security is on Ethereum and smart contracts, right? And so these settlement assurances allow people to think into the future. And we've related this conversation to like things like laws with the Supreme Court. An executive order is a very fast law out of the president. It can get overturned by Congress. But if Congress writes a law, that can get overturned by the Supreme Court. And when the Supreme Court says it's final, it is final. And what we've created with smart contracts is a new level of finality that gives people settlement assurances to think into the longterm. And that's the same conversation I'm seeing what you're talking about with creating a developer platform that developers can't get rugged. And I want to ask you about what is the difference in the assurances that developers have in this new world? And what are the downstream net effects of producing a developer platform where the developers have the assurances that the structures that they build will be around forever? What kind of creativity is unlocked at that point? Yeah, so I want to be clear upfront. One of the reasons Farcaster is still invite only is we aren't at that bar internally of what we'd say is like an unruggable platform. And we've put a lot of effort in over the last year and we're hopefully getting pretty close. We're hoping to have it kind of midway through this year at a place where Farcaster from a developer standpoint is actually permissionless and call it unruggable or the idea is you're sovereign. As a developer, you will have full access to the data and APIs of the protocol. And that's built with something called Farcaster hubs. And actually I think it's important to delineate that we only do a minimal amount of stuff on chain. And part of that is actually we're trying to keep cost, fees and usability high and cost and fees down. And so what we do is when you sign up for an account, we actually create that on chain. Today it's on test net, it will be on Ethereum L1, hopefully by July. And what's great is as a default, every single user on Farcaster owns their actual account, their identity. And to use another example, a system like email. So if you use a Gmail address, you actually don't own that Gmail address. Gmail can actually at any time just revoke that Gmail address. There is no arbitration, you can't port it to another service. Now, if you're a little bit more sophisticated and you own your own domain, you can use G Suite, pay a little bit more, and then now you have the ability to port your email. So email is a, technically it does work in that you can port, but the practical reality is most people use a free email address. And actually they don't have to think about it most of the time, but if you do run into an edge case where you do get suspended by Google and you lose access to your email, that's a really, really tough thing. With Farcaster, we're making the decision that every single user, no matter how sophisticated they are, actually gets a sovereign identity that's going to be on Ethereum. And we actually use something called like a gasless transaction, a meta transaction, and we just seamlessly onboard people through the Farcaster client. And we actually think that that's great because it allows both a sophisticated person and a non-sophisticated person to just onboard just like they would web2, but behind the scenes, they do have the actual ability to move that identity anywhere they want and within any client they want. And so that's actually a foundational component to what the user is on Farcaster, but more importantly, that also gives the developer the assurance that if they convince a user to use their app, there is no third party that can come in and say, like this Twitter example, oh, sorry, we're the one that actually owns the identity, we're gonna revoke that. Contrast that to actually a federated system, something like Macedon, you're getting your identity provided to you by a server. So if that server wants to revoke your identity, unless you're running your own server, like it's gonna be very similar from an email standpoint in that you just lose access to that identity. So having the pointer be sovereign and actually on Ethereum L1, we think is worth the cost and the complexity to do that. In addition to the composability and I think the general benefit that you can get from having it sovereignly owned on Ethereum. Getting the other data in APIs to a permissionless state, once these kind of hubs exist, which you can think of a hub as like the Ethereum node, but for the Forecaster network. The other decision we've made is, we are actually going to limit the amount of data per user on the protocol in an effort to keep the requirements of running one of these hubs reasonable for an average developer. And so you can think of it like this, we're gonna cap you at the equivalent of 10,000 tweets, we call them casts. So on the 10,000 first cast, we bump your oldest one out at the protocol level. And then that's the implementation for the hub. And so some people might be like, oh, well, I wish we could have all of it, but the nice thing one, all the data is permissionless. So you could back it up to our Weaver IPFS. You can do that yourself. But the benefit that you do get in kind of making this bounded data per user is we really think we can get up to 100 independent hubs that are running, which are all going to have a full global state of the network. In the same way that if you're running a full Ethereum node, you're gonna have full global state. And that ability for a developer forces the network from a kind of like, we can't be a bad actor as the kind of initial developers and having the biggest client. We can't say, oh, we're gonna gate this stuff because we've actually intentionally built the protocol in a way that I can be, you know, two years from now as an independent developer, I can spin up a hub and I can actually have the full global state of what the forecaster protocol is in a given point. And we think it's worth- There's a bunch of parallels with this design with how the Ethereum protocol is designed, which makes me think that you're onto something here. I've been in crypto for 10 years. I think Ethereum is the right balance between decentralization and pragmatism. And I think building things that people can use are an underrated thing in crypto. I think a lot of people tend to focus on the ideology, which is important. But what I showed up to work at Coinbase and now what I'm doing with forecasters, I wanna build a protocol that has a billion plus people using it, but I wanna do it in a way that doesn't compromise on the decentralization and the sovereignty at the user account level. Maybe it's a fool's errand, but that's what we're trying to do. That's super cool. This idea of building a social platform that is rugless. Not bankless, but rugless, which maybe that's another podcast we spin up at some point in time, David. But I think devs will appreciate that, particularly devs who kind of look at sort of the long-term. I think that the bet here you're making is that, I mean, when Twitter destroyed its APIs, it essentially destroyed all of its permissionless innovation, didn't it? And the only innovation that could happen is innovation that could happen with its internal employees. By the way, they just reduced their headcount by 50%. So do we think we're going to get any new big features from Twitter anytime soon? We'll see. Probably not. But this, it creates kind of a permissionless ecosystem. And I think that's the bet, that permissionless ecosystems win out because you have everybody in the world sort of hacking on this. And the best employees and the best developers don't actually work for your company, do they? They're outside in places in India or all parts around the world. So I get that. I think from somebody who's not a developer, somebody who's never been deplatformed before, they're still not quite clear on this value proposition entirely. And I want to get back to David's question of, what's new about Web3? Like, why is it a step improvement from a Web2 social media tool if I haven't been deplatformed yet? And I think that's, the majority of people listening to this have not been deplatformed from Twitter or from Facebook or from their YouTube account. They can imagine it might happen, but things would have to get bad, dystopian, in order to do that. And so they don't really see the value proposition of being rugless. That's why I want to go back to kind of the on-chain features that you're adding. So, Dan, before we entered this episode and started recording, David and I had an opportunity to go download Farcaster on our iOS device, an app type version. And for listeners right now, I believe, Dan, this is all kind of private beta, so it's invite only. And so we asked you, we're like, hey, Dan, you're coming on, can we get the invite link? And you sent us that, thank you. What's interesting about this is, I kind of see things that social media apps are not providing today, right? Like the Twitters of the world and the Instagrams. You have this whole section of events that you were talking about, where I just plugged one of my ETH addresses in, and I can see that I'm into the Bankless Ultrasound Money podcast episode. It's right in my events queue. And I could go look at David's profile and I could see all of the things that he did with his on-chain data in his wallet. And that's kind of interesting to me, right? Maybe I set an alert, for every time David buys an NFT, so I can ape in. Because he's got the alpha. And then there's this tab called NFTs, where I can see kind of the NFTs added to my address. And then you're making this comment about identity. Well, I was actually able to set up an RSA, at RSA is my handle on Farcaster right now. And you're saying that in the future will be kind of, it's smart contract driven, and it's fully composable with the rest of the on-chain default data. And I think that's going to be a big part of the on-chain DeFi, NFT, Web3 ecosystem as well. And so we have these kind of primitives. And I guess what I'm saying is, I think this is a thesis now that we get into it. We're still very early, but I think that every single social media app is going to need to be redesigned to incorporate on-chain Web3 data sets, tokens, NFTs, identity, and I think, Dan, they're going to be super freaking slow to do this and respond. And they're going to be leapfrogged by social media applications and platforms that actually do. And maybe even, they'll find that it's counterproductive to their business model to expand into Web3. I'm reminded of like Instagram right now. They just rolled out an NFT feature. Guess what? There's a 15 to 30% tax if you issue an NFT on their platform that they take. That's a pretty high take rate for Web3. Like we don't do that in crypto, do we? That's kind of again- We don't do that here. Yeah, we don't do that here. And so I guess what I'm saying is, this is early stages, but I sort of see when I download something like Farcaster, I get like the Twitter experience, but now I have some on-chain data that's added to this, and it's starting to become valuable. Because the big question for me going into a conversation like this, Dan, is like, I know people aren't just going to come for the censorship resistance. It's decentralized. Okay, cool. I don't care. I'm not being deplatformed. They will come for the features. And to the extent that you are able to innovate faster on those Web3 features and make that valuable, then I think we'll start to kind of draw the audience. Anyway, that's how I'm thinking about it. What's your take on that thesis? We completely agree. And it's actually one of the reasons we're doing both the protocol and the initial client at the same time. Because our view was, one, we could go build the world's best protocol, but then we're going to have to spend a whole bunch of time trying to convince other people to build on top of it. And that in of itself is extremely hard. And so where we started was, hey, we're going to build the protocol and the initial client, and we're going to do a whole bunch of hard work to try to figure out features and a set of use cases that are going to get at least some initial group of daily active users. Because I don't think any other developer is going to want to go build on the protocol if it doesn't already have active users, because users use software, they use clients. And so that's why we started with building our initial client, built those initial features. And our thesis is, if you build the best network for people who are interested in crypto and web3, that is an amazing initial starting community, especially if you believe that we're going to continue to have more stuff that ends up on chain, whether that's visible or kind of like behind the scenes in the background, that's our bet. Building the initial app is a social network for people interested in crypto and web3, and thus the set of features that we've built, right? If you say GM on Farcaster, we change the like button to a GM, you have the NFT features. If you actually go to any given NFT, a CryptoPunk, you can actually see everyone else on Farcaster that provably owns that NFT, right? So if you find that there's some community, whether it's on a CryptoKovn, CryptoPunks, that you are interested in finding those other people, you can actually just go and follow every single person. So you could go take your bankless NFT, click that as a category, and then actually find everyone else on Farcaster who minted that NFT. And so those types of features are, for our initial user base, highly engaging, and we're going to continue to add more of those. And then actually we have a kind of bet that over the course of the next few years, you're going to have more and more just things, web3 objects is what we call them, just natively represented on chain, a mirror post is another great example. From the surface to the average user, that looks like a medium post, right? Like no different, it's a bunch of text rendered on a webpage. But what's cool about a mirror post is you can have the instantiation of it on our weave, right? We can permissionlessly pull that into our client. In addition, there's interactivity with a mirror post because you can mint it and you can trade it and collect it. And so all of that functionality, if we're kind of taking web3 as the bet and understanding natively what's happening on chain inside of a social experience, you almost start to get all this innovation that's happening on chain for free, right? So if you're natively servicing whatever someone's doing on chain in a social way, there's some new use case that pops up. You're now starting to kind of have an initial conversation about it, but then you can actually add and make the features even better. And so that's for sure how we're approaching it. And I don't know if you've heard of it,