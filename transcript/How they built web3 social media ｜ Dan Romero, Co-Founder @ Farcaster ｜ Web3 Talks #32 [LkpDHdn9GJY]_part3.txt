No one's even going to build the read-only experiences. We launched the beta last year. We didn't have a single third-party developer work on the protocol for almost six months, like in terms of just using the data because there wasn't enough data. It was mostly me posting, you know, you go on Farcaster, it was like 80% of the posts were from me. And I think, whereas in the last three months, we've had a whole bunch of people permissionlessly develop even with only, you know, 3000 people in the beta, because the amount of data is increasing at an exponential rate. It's actually going faster than the growth rate of the users. And as a result, like, even with a small group of people, because again, there's a focus a little bit on quality, people find it interesting to play around with this. There's no API key required. And so they started building things. And so I think as the network grows in terms of total number of users, the content is going to grow even faster. And you're going to start to get the read-write clients because the addressable market will be big enough. And that cycle, I think, hopefully, like, creates a bit of a flywheel. An analogy I always like to use is the iPhone. So the iPhone started out, no third-party apps. Apple for the first year was the only app developer to build a native app. They actually built the YouTube and Google Maps. Like, you know, they got the data obviously from Google, but they were the developer. Then the App Store came out a year later. And the initial apps were a lot of early adopters, people who had owned the iPhone. It's kind of a flashlight app, some rudimentary games, like to-do lists, all that kind of stuff. And it took three or four years before you started to get the true native mobile things that we take for granted today. Instagram, I think, or WhatsApp being the best example of this, right? Like, the original iPhone was still sending things via SMS. Whereas once you had a data connection, you could say, wait a second, I don't need to pay like beyond printer ink levels of expense to send data. You know, I can just do this basically for free and over like way faster and more reliable. And especially in the developing world where it was like SMS was insanely expensive. And it's like if I use WhatsApp on Wi-Fi, it was free. But those didn't happen right away. It took some time to understand what new primitives were enabled. Benedict Evans has a really good frame on this is what sensors the phone kind of uniquely started to enable actually drove a lot of some of these primitives. Like the fact that you were walking around with a device that had GPS, like a high-end camera. And like those things take time for developers to digest, as well as the iteration of the phone, right? Like the camera that started out on the iPhone versus wherever we are now, I just say is a big difference. But I think that's how we think about it. So it's like clients are going to start on a pretty basic level today. But it's important because people are kind of figuring out like what can you do, and then work their way over time to more sophisticated things and fundamentally new experiences is where we want to go. What I love the most about it is that if you wanted to make a social app, as a developer, you say, okay, Facebook is broken, Twitter is broken. Let's make an app. You cannot just make a feature. You need to get this damned people there. And this is the hardest part. But what do you do? You say to the developer, hey, here are the people and you can build your social app using these people. Like you can just use the social graph. If your app is good enough, they will use it. If it's not, they won't. But you don't need to spend like five years building the social graph, going around college campuses and asking people to sign up. So this is like, for me, it's a breakthrough because I dreamt about social app when I was, you know, in college when Facebook went big. And so, but like, their network effects were so strong that like, unless you were there like, I don't know, like TikTok, Instagram, Snapchat, like a few social apps from like thousands, or maybe tens of thousands apps that people try to build, basically like because of that, because you don't have an access to people as a developer. So this is really beautiful thing. I think that's a great insight in that developers who build protocols think that the brilliance and the technical specification and the protocol itself is the thing that will attract other developers to build on it and might work for an L1 cryptocurrency blockchain. Maybe it works in DeFi. I think, you know, probably not actually as much, but maybe more in DeFi because you're actually volume weighted, not user weighted. But with social, the thing that people care about is addressable daily active users, not signups. It's like people who are actually using this every day that if they see a new app, they can tap in and use. And I think to go back to the phone analogy, what makes mobile development so powerful is when you buy an iPhone or Android, you are a daily active user, but you're a daily active user that literally has the device attached to your body most of the time with a buzz. And so it's just this like crazy primitive from a addressable number of users standpoint that it makes it so lucrative for developers to take shots on goal in terms of trying to build an app that people find useful to put on their home screen. And so I think that that is the thing that if you're trying to build a protocol that like fundamentally is rooted in how many active users are using it, the only thing that matters is actually presenting developers with a group of quality engaged active users. And that in of itself is the most important thing. There has to be some amount of technical, right? Like you can't have something that doesn't scale because then it's not usable and the users will go away. But if you can assume for a base level of technical sophistication, all of the upside is driven on on active users. And in my mind, users don't use protocols, they use apps, apps use protocols. And so if you can't build a good enough app at the beginning, that is high enough quality to get users, why would anyone else build that high quality thing on your protocol? I just think it's lazy thinking. Yeah, totally agree. So like, let's say I'm a builder, and I want to build something on Forecaster. So how does it work technically? Like what do I need to know? How do I approach this kind of task? Worth delineating what's on chain versus off chain. And it's interesting, when I first started, I kind of defined Forecaster as this crypto protocol. And I think it's actually kind of confusing for people, because as soon as you do that, they think everything's going to be on chain. When the reality is, what we're building is a social protocol. And it happens to have a blockchain component, which is on Ethereum, it's on testnet today, it'll be on mainnet next year. And the only thing that's on chain is the mapping of kind of think of as like the user identity, which is kind of some combination of an identity number, and a username, which is optional, and an Ethereum address, which is a public key. And that is it. Like, you can actually just keep that primitive on chain. And it becomes the source of truth for when we say, you know, who's DWR, who's Mac, or who's Elon, you can actually all go to the blockchain and say, this hasn't been tampered with any individual or company outside of the individual who owns the private key for that Ethereum address. And what is useful about that, and actually, I get a lot of people who say, oh, well, you could do Farcaster without a blockchain. And what I push on is here are the constraints. I think I believe in universal namespaces, I actually think it's like a vastly superior user experience, right? Like, there's a reason people put at blank on like, you know, you go on TV, and it's like, they tell you the Twitter handle, it's like, it's like a very easy way for someone to find another individual, superior to domains, superior to phone numbers. It's like very human readable, kind of like very, it just like works. And so universal namespace that isn't controlled by any one company or individual, and I would actually argue that anything that's rooted in DNS is ultimately controlled by the US government. And if you've ever seen this website has been seized, that is the US government's ability through the Department of Commerce to actually just go right into DNS and like pull a domain and take something over. And I think that people don't appreciate that because most people don't run into that issue on a regular basis. And so yeah, from a user experience standpoint, you don't care. But if you're actually trying to build this credibly neutral network, that makes that really strong guarantee, those two strong guarantees that I mentioned as users control who their audience like that direct relationship and the developers always have unintermediated access to the data and APIs, you need a system that just will, it doesn't listen to anyone, it just runs the code that has been written. And that is the core primitive that's on chain. The second part of Farcaster, which is the vast majority of all the content and the average developer experience is we call them Farcaster hubs. They're still in development right now, because we changed kind of the architecture from v1 to v2. But you can kind of think of it as like BitTorrent in terms of this like swarm where it just all the data gets kind of handled for you and an Ethereum node, which for a developer, if you think about an Ethereum node, it's kind of have a standard set of APIs, JSON RPC APIs, that allow you to kind of like query different things like okay, this address or you know, whatever. And those are the two kind of core parts of the network. Everything in the hub is off chain. And the way the authentication works is that signature for any piece of content has to map to that public key that's on chain. And that private key is the Ethereum private key. And in doing so what you get is a nice property is you can't spoof content on the hub, right? There is no like, oh, I'm pretending to be Elon and I've tricked the hub, because the hub respects by default, the kind of like provenance of the namespace that exists on the chain. And so with those two elements, I think you get the best of both worlds, you get the sovereignty and the non-tamperability of the core primitive of the protocol with the user experience and speed and you don't have to pay gas and all this other kind of stuff of web2. And there will be scaling challenges for sure with hubs like we already know kind of like where it breaks in the next few years if the network continues to grow. But all the more reason that we're trying to be slow on growth. So it's like make sure all this stuff works and then also be worried about scaling and having some adversarial thinking around like, okay, where are the areas and pain points on hubs? Like, you know, who's going to try to, you know, what level of decentralization do you need probably on the order of about 100 full hubs running? Do you allow people to run their own hubs that kind of like running your own website, you can always have your content guaranteed. So I think that there's a bunch of stuff to still solve there, but I think in general, the developer experience for most people building an app on Farcaster is they just need a hub so they can download that off GitHub, run it on their own infrastructure. I would imagine a company like Alchemy or Inferior or Coinbase will just run Farcaster hubs as a service. You can sign up, use that, right, just like Ethereum nodes. And as a result of that, you have all the data on the network and it's queryable and you can kind of build and never have to worry about like, oh, what happens if my API key is removed? So I think that's the core aspect of the developer experience. We are in a weird state right now where because we have this V1 architecture, and actually because of the Ethereum merge, we had to kind of move a little earlier. So we're in this like hybrid where it's like the data is the core on-chain primitive is decentralized, but the data that exists in the beta so far is like not in a hub. And so hopefully in the next three, four weeks, that's done. Like you can spin up a hub, replicate the data and you're good to go. Yeah, it sounds really approachable when it comes to billing. And I also know that you have like a telegram group for builders that you, you know, you connect them, you answer the questions and so on. So that's an interesting one. So what I found is like a lot of communities is kind of default to Discord and they're like this proliferation of channels. It's now you're in a UI that like, I think is like very noisy in terms of all these other things going on. It's hard to manage. Like it's just like a full-time job. And I think the other thing is open access to channels. It saves you time as the like core team, but the challenge is then you have all these other people show up. So other accounts that are not developers. So as the size of that group grows, you might be less likely. You're like, oh man, there are 900 people on this channel. Do I really want to ask this basic question? Whereas our channel has grown a lot slower. So I think it encourages people to talk more. And then the other thing, and you know, I have plenty of friends who are VCs. When VCs show up, especially like kind of like VC analysts in a developer chat, then any developer who posts knows that they're going to get like kind of pinged by someone. Hey, look, so you were working on something on FarCaster. You want to have a call? And that's just like distracting. It's like, no, no, no. I'm actually here because I'm like trying to build something. And so we've tried it and it's actually worked pretty well. It's like there's a single channel. If you're a developer, you ping me. I don't, the VCs on the network aren't pinging me because I'm going to be like, are you a developer? Like it doesn't seem like it. And so I think it's created like a very nice community of, you know, it's now about 200 people where I think people feel a lot more comfortable sharing and being a little chatty, which I think is actually useful because you can always mute the channel. Okay. So like, what's your vision? Like, you know, two, three years for FarCaster, how it's going to look like if everything goes well? Yeah. So let's start with like kind of like the next six months and then work our way up. I think the next six months, the goal is to get FarCaster v2 shipped. So that's soon. And then on mainnet. And I think getting FarCaster running on Ethereum mainnet and proving out some of these hypotheses. So one, it's going to cost some gas to register. And then if you want a username, which is optional, it'll be about $10 a year. And so that's a hypothesis we have. We feel pretty good about it, but let's see if the market actually agrees with us. So getting it out to a place where we know that the protocol has its own revenue mechanism for funding protocol development. Right. So if you buy a username, it's actually you're renting a username from the smart contract, not from a company. And that money goes into a treasury for that smart contract. And you figure out how to do the protocol development, incentivizing hubs, all that other kind of stuff. That is a sustainable model for the protocol, which I think another thing that I think people don't appreciate because it gets a little muddled sometimes is Web3 crypto, if designed right and you can actually find something people are willing to pay for, you can fundamentally change the way open source development is done. Because rather than kind of having to do the Wikipedia, beg for donations, like, hey, everyone uses this free resource, but please donate. It's just no, if you're serious about forecaster, you're going to probably want a forecaster username and rather than paying that to a company, you just pay it to a smart contract in Ethereum. And I think that there are really nice ways you can abstract that and you can take a credit card over here and actually translate that into crypto and pay the smart contract over here, kind of like a domain registrar. But I think that's something that we want to prove out. I think the second thing on the protocol side is today we have one main client, our client, and I don't think that that qualifies for protocol yet in the sense that if, for example, we didn't want an individual user to use our client, let's say they were kind of really being a jerk. And like we just said, like, hey, this is actually hurting the vibe of the community. If we had to kick them off our client, theoretically, they're not kicked off the network because they have that core primitive, they can go build their own client, but practically they are. It's like, well, why am I going to build their own client? So I think the other main thing is we need to get to at least another client that has reasonable UX. And now you have what I think starts to get interesting is you have what I call exit with interoperability is that if I get kicked off this client, I can go to this client and maybe this client's open source. So it's actually, or like directly connects to a hub. So you actually have no other person that you have to really deal with. Now you have a network where you have competition, but more importantly, you satisfy that like, hey, this has actually reached a level that the sufficient decentralization while theoretical is actually now working in a kind of like practical manner. Yeah. Like apart from the funny name for the client, it should be called Outcaster. But you know, like the thing that I wanted to interrupt with is that, you know, whenever someone doesn't like Twitter or Facebook, they say, yeah, build your own social app and here, and obviously they don't because it's hard, but here you can just switch clients. If you don't like this client, you can switch the client, which is start in the future when that client exists. Right. Like intellectual honesty is important. So I think that the other thing I would say is, so all through that, we want to continue to grow because I think if you, you know, keep the network at 3000 people or 10,000 people or whatever, like it's kind of a science experiment and it's like, oh man, it's so great. Like, do you have access to Forecaster? Whereas if you really want this to be an internet scale protocol that is permissionless at some point, not invite only and anyone in the world with a good idea or whatever wants to be able to go use it, you need to actually force yourself to handle the problems as that happens. But I think going back to this kind of slower deliberate growth, we want to grow on our own terms because we're a small team and we have a lot of stuff that we're trying to do. I just gave you two big things that we need to go do. And so not being dictated by some ideology of, oh, well, because it's invite only right now, it's not decentralized. Yeah, I'm agreeing with you. But I'm giving a vision on where we want to head and we're putting a lot of work in on the protocol and thinking and trying to be transparent and communicate. And if you don't like that, you don't have to use it. Fine. But I think what's resonated with a group of people is, huh, it seems pragmatic and actually the product is kind of fun today. And why not be along for this ride? And maybe at some point, like, I don't plan to do this, but let's just take a hypothetical. We don't make the right decision and you get upset. What's interesting is you could potentially just go fork the network and say, hey, get rid of those guys like they actually aren't the right stewards. And whether that's I think an analogy is like Linux. But like in some ways you could even say like Ethereum, like a lot of those people were Bitcoiners. Right. And so at a certain point, people just said, hey, I'm going to take some of these principles, right. They started proof of work and all that kind of stuff. And it's like, we're going to go apply this with a new set of parameters. And it's happened in history all the time. Ethereum's being like a really, really good example of this, especially Christianity, if you just look at all the denominations. But the thing is, is you're free to do it. But I think that if we make the right set of choices and continue to communicate and be open and just say, hey, we're optimizing for the protocol and our actions actually prove it. I think that there are going to be a reasonable number of people in the world who understand the pragmatic tradeoffs and realize that pragmatism is probably the way to actually get to scale and the end goal of getting to scale that is sufficiently decentralized in a way that you kind of have a competing set of clients, exit with interoperability, all the things that we're hoping to get to, they buy into the vision. Yeah, that's a beautiful wrap up. Where people can learn about Farcaster, how can they get involved? Farcaster.xyz. There's the GitHub. That's read the protocol spec, understand how it works. It's somewhat approachable for even a non-developer. So that's a good place. And then if you want to access an invite to the network, if you just DM me on Twitter, so it's DWR, and you just say that you listen to the podcast, I'll send you an invite. Okay, perfect. Perfect. Thanks a lot, Dan. It was a pleasure. It was very, like, even though like I knew Farcaster, I'm a user and I thought a lot about it, it was still very mind bending to me. So thanks a lot for that. Thanks for having me. So this is almost the end. But if you liked this episode and don't want to miss the next ones, feel free to subscribe. If you liked it a lot, I'd be personally grateful if you could give us a five star review on Spotify, Apple podcasts, or whatever platform you use. Thanks to these ratings, more people can learn about web-free talks. And it's really important to me. That's all for today. Thanks for listening and see you next time.