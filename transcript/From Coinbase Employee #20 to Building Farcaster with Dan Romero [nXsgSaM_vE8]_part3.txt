two people who've opted to be in it, which I think is a pretty radical shift from what we've been used to in Web2. And that also means you have freedom of monetization. Right. So I think the kind of idea space for monetization is just getting started, not only because you have crypto with this kind of poor financial primitive and you can do things like NFTs and DeFi and the remixability and composability of that, but also just the idea that, okay, I can do a traditional subscription and maybe it's done on chain or maybe it's done through Stripe and a traditional Web2 platform. Fine. I think the challenge is when you are reliant on platforms and in some cases, platforms that are reliant on other platforms, with the example of like if you're on YouTube and then Apple iOS, like there are two rent seeking platforms that want to take dollars before they even get to you. Right. And so the most extreme example was I think Meta, Oculus, they were trying to do a platform for that. And then they had a Facebook, like Horizons platform cut. And I want to say if you did the thing on an iPhone, it had like an iOS, like it was just like cuts all the way down. Right. And what's great about Web3 is you can actually solidify through a cryptographic proof. Again, the average user doesn't need to see this, but from a developer standpoint, that relationship between the creator and a person in their audience, as well as what also gets interesting audience to audience connections. Right. And so that's another interesting thing that's hard to measure. But if you think about it, what if you're Taylor Swift and you want your whole fan club, maybe Taylor Swift is big enough to have like a custom social app that people are willing to even show up to. Whereas most other artists or creators, you're never going to have like a custom app that people are going to use. They're basically their time spent as an Instagram, their time spent as in Twitter. And so you kind of have to play the game there because that's where the attention is. Whereas I think with these kind of remixable, composable, open access social protocols, I think there's a totally foreseeable future where for the three or five creators, whether that's a video creator or a music artist, if I want to have a direct relationship with them, I'm using one of these open protocols because it actually just does a lot of the plumbing for me. And then there's probably some version of call it WordPress or whatever, where you can kind of, or Squarespace, where you can basically as a creator, have a mobile app that the user is like, Oh, great, this is completely interoperable. So when you post a video, I can get it over here on Twitter, the Twitter one, if I want. But if I really want to go deep with everyone else in the community, I can use this token gated app that based on your show, and I can get really, really deep with other people who are members of the show. And we have seen this, by the way, with like the rise of discords is an indication that there is demand for this. But discord, which look, tremendous products and success in terms of just scale, but it's imperfect in the sense that it's not really optimized for mobile. It's a gamer product at the end of the day. Right. And so it's a very desktop heavy experience. Whereas if you think about it, like when you as a, as a creator, if you say, Hey, I have a discord and I have 10,000 people in my discord, you're just like another little icon in this whole long set of discord controls, the notifications and all the experience where you could imagine being if, you know, you're my favorite podcast producer, I can actually now install your app, which didn't take you a lot of effort in the scheme of things, no different than a website because it's using these open protocols. And now you get push notifications on my phone that are completely, you know, direct between you and your audience and whatever the experience, right. And so that, that is a ways off and maybe we don't get there. I'm a big believer that we will, but I think you need to get the infrastructure in place first before entrepreneurs start to say, Oh, this has become a commodity, or this has become this kind of credibly neutral infrastructure that I know I can actually go build these apps for these different creators because this protocol is going to have some level of stability. Right. And I think the example here is obviously email is an example of a protocol that if I really wanted to take the brain damage and go build my own email client, right. Superhuman being the most recent, you can do it. And there is no, you don't have to ask the email consortium for permission. If you understand SMTP and IMAP, like it'll just work. And what's actually even kind of neat is you can build an email client that works with Google and Google, just because at least in the email world kind of has to support IMAP because it's kind of the de facto standard. They don't even really get to say, it's like, Oh wait, so you're, I can actually build on top of your backend and you did all the hard part and just build a better client, which is what I think superhuman is today. Right. They don't have to handle the like low level email plumbing. They're just an IMAP client or a deeper integration with Google. Sure. But I think that that like becomes a pretty powerful thing where if more stuff in social actually has that level of like permission list innovation. And in the case of the building on Google, that's not even permissionless. It's like mostly permissionless. I think you just yield a whole bunch of more interesting experiences, which gets back to this monetization thing is I think we're just scratching the surface. Just to say, Oh, we'll have ad base, we'll have subscriptions, and then we'll have some amount of NFTs. I think you're just at the start. It's like looking at the internet in 1994 and predicting all of the different business models and new companies that have come out of it. Right. Right. Right. One thing that Farcaster tends to be very public about in their branding and their image is that it's a sufficiently decentralized social network. And I think when you come back to it and you ask yourself, what does it mean to be sufficiently decentralized? And I'm sure you get this question all the time. I'm curious, what is the answer to that? What is decentralized on Farcaster? How do you make decisions on what to decentralize versus centralized? Share with me your entire mental model around that. The way to think about how sufficiently decentralized works is there's a spectrum between centralized and decentralized in terms of an application. And in a centralized application, most common example is a company runs a set of APIs. The company decides who uses those APIs can revoke the API keys at any point. And that's basically Twitter. There is no adjudication process for getting back on Twitter. Twitter doesn't want you on Twitter. Tough luck. Right. Same thing goes for the developer. So Twitter has a bunch of APIs. In a prior era, they were much more open. They changed over time. And so that is very much the centralized approach. Other side of things, decentralized. So something like SMTP for email. Git is another good example of one. I can go build a competitor to GitHub and I don't have to ask GitHub for permission. And it'll work out of the box because Git is a decentralized protocol that does not have a corporate owner. But the challenge when you start to get out on the decentralized side of things is the user experience tends to get very technical and way worse. You just need to know how to do everything. RSS is a good example of that. So to use RSS, you need to know, oh, I need to have a feed reader. And it's like, oh, I have a feed reader and I need to keep all of my subscriptions in place. And so the protocol itself tends to be the thing that is more decentralized. And then the spectrum in between is where you can get to something what we'd call sufficiently decentralized. And so from our point of view, rather than start with decentralized and work your way to centralization, it's actually start with centralization and then work your way on the spectrum to decentralization to the point where you can satisfy two conditions. The first is in the case of a social network, any user can have a direct relationship with another user and no one can take them away like that away from them. So if you and I want to be connected, there's no third party that can come in and say, nope, sorry, you can't be connected. The most extreme example of that, obviously, is if you have 100 million followers on Twitter or YouTube and the platform comes in and says, sorry, you don't have a relationship with those followers anymore. So the kind of user to user relationship or creator to audience relationship, that is a core primitive, in my view, for what decentralization is. And then the second thing is the access for developers. So if I want to go build on the data set here and the APIs, there shouldn't be a single individual or company that can come around and say, sorry, in terms of service change, we're going to really actually monetize advertising and sorry, your app doesn't work anymore. And so from our standpoint, the way to accomplish that is the thing that needs to be decentralized is effectively the identity, which is two parts. The first is an ID number. So every person on social media is represented by an internal number in a database is just an ID. And one nice feature of that is on Twitter, you can upgrade your username and you don't lose your followers. It's not like people were following Dan Romero before. And when I switched to DWR, I lost all of them. It's because the way Twitter maps follows is just to that ID number. And then the second thing is the username, which that is much more of a status symbol and a kind of like a your what represents how you interact on these networks. And so if you can remove that from any corporate company and an API, it allows any user to choose whatever client they want and not have to worry about lock in or anything like that. And I think an analogy here is Bitcoin and ETH. When you put it on a company like Coinbase, Coinbase is a centralized company over here, right? Coinbase can choose to kick you off Coinbase. But when Coinbase kicks you off Coinbase, you don't lose your Bitcoin or ETH. You would because, you know, mandatory account closure. That's what happens with Coinbase for some compliance reason. They don't take your money from you. They say, where do you want your money sent? Like, we don't want to do business with you anymore. But you as the user have the ability to exit and then interoperate with everything else in the ecosystem. Right. It's not like special Coinbase Bitcoin. It's no, it's like this is real Bitcoin. And I can move that to FTX. I can move it to a self-hosted wallet. Same thing goes for a social network. So if in the totally centralized version, you get kicked off. There is no ability to exit and then interoperate with the same graph. You have to effectively rebuild it. Right. Another example of this, and there's actually more relevant for social media, is email. So I have a substack and for whatever reason, I might not want to use substack anymore as a publisher or substack doesn't want to host my content. There is no confusion that the email subscriber list that I have belongs to me. Right. And if I take that list and I move to a self-hosted option or a competing newsletter provider, I have uninterrupted access to my subscribers that I worked hard to build that relationship with. And so in our point of view, that's the only thing you actually need to focus on the decentralization. Everything else, you can actually have it be the primary way people deal with stuff is in a centralized client. Right. And the benefit you get from that is the centralized client is going to offer vastly superior user experience because the economy is a scale that start to happen. You probably have cloud-based services versus if you do use the truly decentralized client where you have to host everything yourself, you're now dealing with what happens when the, you know, my client goes down or the host doesn't work, or I have to now upgrade it because there's like a vulnerability in the, you know, the node JS package that's in the open source software. It like the user experience is significantly worse. And the easy answer is why do most people use Gmail and they don't run their own mail server? It's just because it just works. It's easy. Right. And what's interesting about Gmail is you have a Gmail address that's not exit with interoperability. If you have your own domain and use G suite, you can move to a different host, right? Because you own the domain and you can just change where it's pointed. But if you have a Gmail address and you get really attached to that Gmail address, Gmail is not allowing you to move that to Yahoo and say, okay, well the Gmail address now belong with this client over here. Generally, I think Google is pretty good in that you can use other clients that sit on top of it. But the relationship you do have with Gmail is they're looking at all your emails and mining it for data, right? For whatever advertising purposes they want to do. That's part of it being free. But I think that the core of that sufficient decentralization is find the thing that you need to be able to get to be a decentralized point. Keep that decentralized and then let the market develop in a way that you're going to have centralized clients that people opt into and then people can choose more decentralized clients. Yeah. I feel like, Dan, we need to have a three-hour long podcast episode because I've maybe asked three questions in this entire 53 minutes and I'm impressed with how much you have to say around some of the questions. That's probably going to be too perverse. But I want to jump to some community questions that we had come across Twitter, Farcaster, etc. Okay. So this one comes from Martin. How do you see clients for Farcaster evolving plus monetization plans in the future? And we can even do this thing like fire rounds kind of thing. Yeah. We have the initial client. I think we've been building it for two years. It's hit a certain level of polish usability. We have a mobile client, desktop client. So we've done a lot of work to kind of make it easy to onboard to Farcaster as a protocol. Everyone who onboards to... So the company is named Merkle Manufacturing, Farcaster as the protocol. Anyone who onboards to a Merkle Manufacturing client has this really nice, easy experience, gets in. Now they're active on Farcaster, which now also means that they're an addressable user for anyone who wants to build within the Farcaster ecosystem. Because now as a developer building a new client or experience, I don't have to worry about going and convince someone to sign up for Farcaster. I already know that they're there. I can actually just kind of focus on, okay, here are the active users. Let me try to market my product or go to market in terms of that. And by the way, you can post in the feed and people will respond and you know that they're native Farcaster users, right? So there's some built-in distribution there, which as we add more users to the protocol, then the distribution gets better. The natural place for clients to start, which has already happened, is simple view clients that are kind of just doing read-only operations, right? So most of the apps that have been built in the Farcaster ecosystem today have been kind of read-only where they index all the data or rely on a third-party indexer and then are able to show kind of a specialized view. So an example of this is Instacaster shows all of the posts on Farcaster that have an image. Pretty straightforward, pretty interesting UI, relatively easy to boot up. But right now it doesn't have the ability to also use that client to then post back an image into Farcaster. We've been doing a lot of upgrades to the underlying protocol over the last few months. We're going to hopefully get there and offer a much easier way for a developer to actually now go from just read access to both read-write. And that write access is where I think you're going to start to see people do two things. So the first is actually just, okay, I'm going to be a specialized client that does something really well. I don't know, maybe it surfaces all the questions on Farcaster, all the recommendations, and it shows it in a slightly different way. And anytime you take an action there, maybe you like something, it kind of propagates back into the protocol and then it would reflect in that kind of like feed experience for other users. Those are probably the easiest places to start because they're smaller projects. Maybe you can do them over a weekend or a week and you start from there. I think that the longer term, you'll have people building completely new social experiences and using Farcaster to bootstrap the social graph and all of those interactions, the likes, the replies, because it kind of get it out of the box for free. But those are apps that probably need a larger number of people. The more substantial apps probably start to exist when you have 10X or even 100X the number of users. So today we have about 3000 people using Farcaster. It's a private beta, invite only, been really deliberate about growth. So maybe 10X or 100X from here, 30,000 to 300,000, that's where you start to get developers who go, okay, maybe it's actually worth me testing out this kind of weird social idea I have on this network because that gets them at least enough potential users that if you get 10% of them, now you at least have an early user base that you can play around. And as the overall protocol grows, I think that the sophistication of the apps will get more and more sophisticated. And I think the natural way to monetize for these different apps is as the network gets more scale, I think you're going to see naturally apps do free with ads or something. But I do think in the early days, and part of this might be a norm set by our client, we plan to use subscriptions as the primary way to do monetization because we actually think it aligns the values that we are hoping to have in terms of what the network should be as this kind of a little bit more sophisticated pro feeling network versus lowest common denominator scale of maybe some of the Web2 social networks. And the other nice thing is that it aligns how we build the product with what our users want versus how to get them to spend more time so they see more ads. So every subscriber we have, essentially you can think of it as like Amazon Prime, where what Amazon is constantly trying to do is they're trying to find other things that they can add to the Prime bundle that make Prime subscriptions that much more valuable to their subscriber. It's this kind of drive more value. Same thing for Netflix. Netflix is looking, how can we add better and more interesting content for the same price that we're charging for people? But that is a fundamentally different model than something like Facebook and Twitter. They have to keep users happy enough, but there's always that kind of tension where they can dial up the amount of ads in the feed or just do whatever they want because they're ultimately focused on time spent. A good example of this recently is Instagram because of TikTok is pushing Reels. The revealed preference, by the way, is people love out of feeds despite what people complain, but the push is a result of you were trying to actually compete in a zero sum world of time spent between TikTok and Instagram. And so doing the kind of change is you're focused on what gets our users to spend more time versus does this is actually what people want.