Hey everyone, this is Zeno with another episode of Into the Bytecode. Today I sat down with Dan Romero, one of the co-founders of Farcaster. Farcaster is a decentralized social network. It's being developed as an open protocol that is credibly neutral like email and can grow to support many clients and products built on top of it over time. I personally deeply resonate with the level of thought and intentionality that Dan and team are putting into developing this protocol and really do think it has a chance at becoming foundational infrastructure and making a meaningful difference in the world. This was an interesting conversation and I had some personal light bulb moments through it. For instance, talking about how small product decisions in these social networks have ripple effects in society and how there's a deep path dependency in how things evolve. How Farcaster really has to win over users in one of the most ruthless arenas for competition in the world today, which is competing with other social networks that have had years to mature and thousands of engineers working on them. And we talked about their strategy for doing this, which I find to be quite brilliant. We also got into some of Dan's personal philosophies around how he's building the team and why they're bringing together a small lean group of senior engineers and intentionally not building a large team. With that said, I'll leave you to it and I hope you enjoy the conversation. One of the things I was actually personally very curious about was when you left Coinbase, I know that you spent some time really kind of zooming out. I think in our first conversation, you told me a bit of the political science, like history, kind of like deep dive that you did in that interim period. And I'm curious how that period was for you and then how you were thinking about what to work on next and why you chose this as the thing. I've been at Coinbase for five years. I left May 1st of 2019 with an explicit goal of taking a full year off. I wanted to get bored. That was advice. I talked to a bunch of different people. How do you spend your sabbatical after working in a company for a while? And so I think I was generally pretty successful in doing that. I think COVID kind of made it a little less fun for maybe the second half, but for the first part, traveled. My wife was off as well, so it was the two of us. It took a kind of wide aperture in terms of the type of stuff that I wanted to be exposing myself to, especially on the history side. And one thing is like when I was traveling different countries, I tried to read a history about that country and a little bit more understanding of the world. So we started our trip in the Middle East. I read this incredibly dense book on the history of the Arab people and some 1200 pages or something like that. And I think it was just exposing myself to a variety of new kind of ideas and just new information. And I think it was a bit of also a kind of decompression from five years in crypto and Silicon Valley. Right. And I think a little bit of time and space away from the day to day grind left my mind a little bored and a little bit more creative in terms of like, okay, what do I want to work on next? I have had this idea for building Twitter as a protocol and a lot of people have had this idea, but there's an influential essay that Paul Graham wrote in 2009 and it's on his website. So if you go to paulgram.com slash twitter.html, it's one of his shortest essays. And he makes this really interesting observation that Twitter is a protocol that somehow ended up within a company. And you could maybe say that for other companies, but specifically Twitter, if you kind of think of email as this decentralized protocol where I can specify the recipients and then they reasonably will receive that email. Yeah, you have spam filtering and email deliverability, but for the most part, it's kind of this one to a defined number. And then the web is this kind of, I can put information up there, but then people have to kind of find it and discover it. And then Twitter is this kind of hybrid where I can put a thought out and it's not specified to the number of people from my end, but other people have specified that they want to actually receive that information. And so the actual kind of original name for what Farcaster was, was RSS plus because RSS in some ways has a very similar aspect to that where it's, I can tell you which, which blogs I want to get updates from. And then you do this kind of pull model. But the thing that's beautiful about Twitter is, is a vertically integrated experience. And so the feed discovery, the kind of easy navigation of the UI that you can kind of follow rabbit holes and click through usernames, find profiles, get all their content all in this kind of really nice, slick app experience. I think that has always kind of intrigued me as like, well, could you actually build that level of UX polish, but also have the backend be truly decentralized. And, and part of that is also, I, I, my first kind of forays into building apps was building on top of the Twitter API. So I was an early Twitter user in college and I built a polling app. And so I think the idea that Twitter could function as a protocol, those first five, six years where the, the API was much more open and you had all these third-party clients, we actually have a counterfactual, like it was a pretty exciting time. There was a lot of innovation that happened. And then reasonably the company needed a way to monetize. They didn't want this fragmented ecosystem. And so they kind of put a cap on what you could do in the third party and, and kind of start working through their, their primary client and which I could show ads and things like that. So that idea had been kind of rattling around in my head. And I think with a fresh set of eyes on like how to potentially go build it, started to kind of formulate this, this general idea of what if you made Twitter similar to something like Keybase, which for those who might not know what Keybase is, is kind of this nerdy cryptography startup that ended up selling to Zoom. But it is a really interesting idea where you could associate your other identities online, your, your Twitter, your GitHub, your Reddit with a cryptographic proof. And then not that every user would need necessarily verify this, but you, you had the option if you were technical to actually verify that the, the proof that the person's Twitter was, you know, DWR on Twitter, it did actually kind of compute. And so thinking that maybe you could do this and actually use a blockchain as that kind of public key to identity pairing, and then everything else could actually just magically happen off chain. And then that way you could kind of like bring the whole system together so that you got the kind of best aspects of web two, right? Speed, usability, no cost to do anything with this kind of sovereignty that you could get by actually having stuff on chain. That I think is the thing that clicked while I was traveling and a little bit bored to the point where I started spending more time thinking about the IDMAs around that, did an exploration of like, how could you just improve RSS? Feels like RSS is actually pretty old school at this point, even though all podcasts, this podcast is going to be distributed via RSS. And I think that the summation of things, plus I reconnected with a colleague of mine from Coinbase, Viren Srinivasan, who also seemed kind of interested in working on this. And we actually just then started working on prototypes because I think that there's benefit, especially if you don't have other kind of like, we were self-funding it, like just action produces information. So we've said like, let's actually try to get a prototype working that simple system where we put the stuff on chain, testnet, and actually get everything else working off chain with a client. And that initial system ended up turning into what is now Farcaster. Yeah. It's pretty wild how simple the primitives involved in Twitter and now Farcaster can be and how like the kind of emergent things that they can lead to, like at a base level, it's really kind of like RSS, like you're saying, right? You're publishing something and other people on the other side can say that they're interested in hearing it. Was it through this process of kind of starting to work with Viroon and prototyping things, was it clear to you that this was the idea that you're going to go after? I'm also asking, knowing that you have a very long-term kind of point of view on this, right? I've heard you say elsewhere that you're going to grow to the first million users, compounding 5% a week or a week or a month, but in either case, it's going to take multiple years just to get to that level. So you're obviously at this point committed to working on this for a long time to come. How did that happen for you? Yeah. It's good to kind of step back. And I think one of the other things, having left Coinbase, I kind of had this thing in the back of my mind that Coinbase would go public and there was going to be a decent economic outcome there. And that the thing that I wanted to work on next was going to have a long time horizon. Elon is very inspirational in that sense. I think the level of his work ethic is something that I was never going to be able to go reach. But I do think that there is something that all people who can kind of look at that and say, okay, I have a long time preference here, can work on something that's really ambitious and know that it potentially takes a long time to get there. And so kind of going into it, I didn't want to build a company that I was going to work on for three years and then sell to Coinbase or Google or something like that. I really wanted to work on something that I could see myself working on for 10 or 20 years and building a credibly neutral public square for the internet as a protocol, which is the best way to describe Twitter, seems pretty reasonable to potentially work on for 10 or 20 years, especially given I think a lot of the consternation that now exists with centralized social media and kind of, it brought several billion people online and connected them. So I think to me, that's actually net positive, like as much as people want to say social media is net negative. But I do think that there are a lot of challenges when one company owns the entire stack as opposed to something like the web or email, where I think that there's a lot more competition. And we could talk through any of those models, but I think in terms of what I wanted to be working on is saying, okay, what will I be proud of 10, 20 years later, if it works, it's a big F. I think internet scale protocol that you could sit alongside TCP, IP, HTTP, SMTP, DNS, and then forecaster potentially as that, this is the social graph protocol that's credibly neutral like Ethereum and like all of this kind of stuff that lives in the crypto world. But now trying to kind of blend it because much of forecaster is off chain, right? It's much more of a traditional web protocol. I think that that's motivating and allows us also to make decisions that are oriented towards the long-term versus trying to hit some arbitrary number in a compressed period of time. So the invite model where we want to be consistently growing, but not growing too fast has downsides in the sense that maybe something else pops up that grows a lot faster and ends up getting people to use it, could happen. But I think our point of view is quality is underrated and in a kind of culture that puts a lot of emphasis on doing things extremely fast. And I think that there's benefits to speed and kind of urgency, but in terms of building a social network, especially given that there are web to social networks at scale that already exist, we're not dealing with a land grab scenario. We are dealing with the next best alternative is actually a really mature polished product where people already have existing audiences. So I think taking a different tack of saying, okay, we're going to actually double down on quality is something that's a lot harder for an at-scale network to do because they're already dealing with the issues of quality when you're at scale is extremely difficult. Yeah. It's very interesting. And I think there's a deeper kind of meta point here, which I sometimes think about in the context of building anything new or anything new in crypto, which is, you know, if we're really building these long lasting protocols that are meant to be woven into the fabric of the internet and the world and outlast our lives, like they really, like they need to be built on solid foundations. But then on the other side, a lot of kind of discovering what crypto is able to do comes from running these experiments without any kind of like thinking about like, how's this going to evolve? Like you can't really see around these corners in some ways. This is actually one of the things I've really resonated with how you're building Farkaster, which is, it seems like you're being very kind of methodical about separating out the pieces that need to be robust and reliable and then being like, okay, there's this, you know, there's a way we can experiment with having, you know, there can be different hub clients or there can be different algorithms for sorting this stuff and there can be different applications, but they can plug into something that is going to be robust and sustainable. And I think that's a very interesting thing to think about as we're building these protocols. One frame we have is if you start from the goal of what we're trying to build, this is an internet scale protocol that's credibly neutral that anyone can use to build a new social network, right? That's the end stake goal. In order to get there, in order to meet that bar, you need many different apps and services, clients, open source projects built on top of the protocol. That requires developers and developers to put a lot of effort and energy into building that set of, you know, apps and services. You're not going to get that just from a technical specification. So what is actually going to attract the developers? You need a baseline set of competent technical decisions, but the primary thing that developers who are building, at least in social, they're looking for daily active users. Like that's the liquidity, right? If DeFi is TVL, like DAO, daily active users, is the TVL equivalent for a social protocol. And daily active users don't use protocols, they use apps. And so from our point of view, the only way we're going to even have a shot at bootstrapping this ecosystem, and it's unclear if it'll work, right? Like we're going to do our best and try to take a long-term view, but you have to get an engaged, high-quality group of people using a single app every day to generate at least the initial amount of data that actually at a protocol level from the kind of data and APIs that you can access, starts to become interesting enough that other people want to start to experiment, right? And as a result of that, if you're trying to do everything in this kind of decentralized, permissionless, like ship it and then do governance votes, your rate of innovation is just going to be a lot slower. And I think that you need to just have a pragmatic point of view as saying, here's what our goal is, here are the things that we've done so far to actually make it decentralized. And actually decentralized, the four primitives is a really important thing for people to start to trust you. But part of that is also just, it's a narrative and a belief in that team that, do I trust that these guys are going to do what they say they're going to do? And a lot of that is earned through actions, right? And I think examples here also, we have this initial client, but we're not trying to go gobble up every interesting idea that's happening in the ecosystem because it potentially drives more usage in our client. We actually need to be protocol stewards with this. And so for us, it's this kind of balance, which is not a web two model, right? Web two is all about bringing that stuff in house so you can better monetize. And it's not a pure protocol model because we actually have an opinionated point of view, having built this initial client, both on what the protocol should actually be doing as a result of running it for a year and realizing all the shortcomings that happen to the technical side of the protocol. But also we have daily active users and when they're not liking something, we need to actually make changes to our client that then we need to think through, hey, is there a way to actually make this default or this set of decisions we've made? Can we just actually codify that in at the protocol level so that another developer, when they're showing up, they don't even have to run into the same issue. It just kind of works in a way that they might not even realize, but that's actually been optimized at our client level. And we figured out the set of trade-offs to make it the protocol level to make it easier for other people to build clients. And I think that is the thing we're going to run into a bunch of pushback in terms of the architectural decisions we've made for Farcaster. And I think that, hey, it's healthy, right? Free market. Like if you have a better idea, go build. And if people use it, that's all that matters. But I think what we've realized a year in is that the protocol should be in service to new developers, right? So then the marginal developer who's showing up, you should try to make the protocol as easy as possible for that developer to boot up a new app service client and actually be on a level playing field relative to the incumbents or the people who got there first. And so you can make decisions on how much storage there should be for a hub required or how many we think is reasonable for decentralization, right? You could get to a model where if you have five, is that decentralized? Some people would say yes, but from our point of view, we actually want many different clients and experiences. So as a result, we want to actually make those hubs be excellent from a developer experience standpoint and reasonable to run for anyone who wants to be able to play around with it. And we have to deal with those trade-offs versus other networks might be able to actually exceed our ability to do certain things, but then they're going to have other trade-offs, right? Like they might be more on chain. So there's actually gas costs that comes as a result of using it, or they will be less centralized or less decentralized because the requirement to run a hub is higher. Yeah. The relationship between the product and the protocol is a very interesting one. How are you thinking about the product long-term? Are you, do you see it as a core, like you're going to build it into a compelling application that people use in the future, or is it more for the sake of fleshing out the protocol in some sense? And both sides of this can have kind of good reasons for them, right? There's Uniswap for instance, where the front end app is still one of the best ways to interface with the protocol, but then just in the last couple of days, there's like nouns, you know, disbanding their Discord because they don't want to have this like original thing that was somehow well-positioned to begin with. So I'm curious, how do you think about that question? I think Uniswap is a great example of this. If Uniswap didn't have uniswap.org, would it be as successful as it is? No. I think most people would say no. And so as a result of that, I think where we stand is having a really high quality client.